using Novacode;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using Psps.Core;
using Psps.Core.Helper;
using Psps.Core.Infrastructure;
using Psps.Core.JqGrid.Models;
using Psps.Data.Repositories;
using Psps.Models.Domain;
using Psps.Models.Dto.Lookups;
using Psps.Models.Dto.Reports;
using Psps.Services.Disaster;
using Psps.Services.FlagDays;
using Psps.Services.Lookups;
using Psps.Services.SystemMessages;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;
using System.Text;

namespace Psps.Services.Report
{
    public partial class ReportService : IReportService
    {
        #region Fields

        private readonly ILookupService _lookupService;

        private readonly IReportRepository _reportRepository;

        private readonly IDisasterMasterService _disasterMasterService;

        private readonly ISuggestionMasterRepository _suggestionMasterRepository;

        private readonly IMessageService _messageService;

        private readonly IFlagDayService _flagDayService;

        #endregion Fields

        #region Ctor

        public ReportService(ILookupService lookupService, IReportRepository reportRepository, IDisasterMasterService disasterMasterService, ISuggestionMasterRepository suggestionMasterRepository, IMessageService messageService, IFlagDayService flagDayService)
        {
            this._lookupService = lookupService;
            this._reportRepository = reportRepository;
            this._disasterMasterService = disasterMasterService;
            this._suggestionMasterRepository = suggestionMasterRepository;
            this._messageService = messageService;
            this._flagDayService = flagDayService;
        }

        #endregion Ctor

        #region Common Method

        private string GeneratedBy()
        {
            var userId = EngineContext.Current.Resolve<IWorkContext>().CurrentUser.UserId;
            return "Report generated by: {0} at {1}".FormatWith(userId, DateTime.Now.ToString("HH:mm, dd/MM/yyyy"));
        }

        private string DateFromTo(int? fromDate, int? toDate)
        {
            string dateRange = fromDate.HasValue ? " from {0}".FormatWith(fromDate.Value) : "";
            dateRange += toDate.HasValue ? " to {0}".FormatWith(toDate.Value) : "";

            return dateRange;
        }

        private string DateFromTo(DateTime? fromDate, DateTime? toDate)
        {
            string dateRange = fromDate.HasValue ? " from {0:dd/MM/yyyy}".FormatWith(fromDate.Value) : "";
            dateRange += toDate.HasValue ? " to {0:dd/MM/yyyy}".FormatWith(toDate.Value) : "";

            return dateRange;
        }

        private double PixeltoWidth(int pixel)
        {
            double divider = 7.0024135d;
            double width;

            width = (pixel - 12 + 5) / divider + 1;

            return width;
        }

        private double PixeltoHeight(int pixel)
        {
            double divider = 1.333333333d;
            double height;

            height = (pixel) / divider;

            return height;
        }

        private System.Drawing.Color ColorFromRgb(string rgb)
        {
            int r = int.Parse(rgb.Substring(2, 2), System.Globalization.NumberStyles.HexNumber);
            int g = int.Parse(rgb.Substring(4, 2), System.Globalization.NumberStyles.HexNumber);
            int b = int.Parse(rgb.Substring(6, 2), System.Globalization.NumberStyles.HexNumber);

            return System.Drawing.Color.FromArgb(r, g, b);
        }

        #endregion Common Method

        #region R1

        public System.IO.MemoryStream GenerateR1Excel(string templatePath, int? fromYear, int? toYear)
        {
            IList<R01SummaryDto> summary = this._reportRepository.GetR1SummaryViewReport(fromYear, toYear);
            IList<R01SummaryDto> summaryFin = this._reportRepository.GetR1SummaryFinViewReport(fromYear, toYear);
            IList<R2SummaryComplaintDto> complaint = this._reportRepository.GetR1SummaryComplaintViewReport(fromYear, toYear);

            //Disaster Summary
            IList<R2SummaryDisasterDto> disaster = this._reportRepository.GetR1SummaryDisasterViewReport(fromYear, toYear);
            IList<R2SummaryDisasterDto> disasterFin = this._reportRepository.GetR2SummaryDisasterViewReport(fromYear, toYear);

            IList<R01RawDto> raw = this._reportRepository.GetR1RawViewReport(fromYear, toYear);
            IList<R01RawDto> rawSummary = this._reportRepository.GetR1RawSummaryViewReport(fromYear - 1, toYear - 1);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                double width = PixeltoWidth(89);

                var ws = package.Workbook.Worksheets[1];

                //Summary view in Financial year
                if (summaryFin.Count > 0)
                {
                    int fromRow = 11;
                    int fromCol = 2;
                    int toRow = 17;
                    int toCol = 3;
                    int colWidth = 2;

                    ws.Cells[5, 1].Value = GeneratedBy();
                    ws.Cells[8, 1].Value = "Report Year:{0}".FormatWith(DateFromTo(fromYear, toYear));
                    ws.Cells[10, 2].Value = ws.Cells[10, 2].Value.ToString().FormatWith(fromYear, toYear);

                    if (summaryFin.Count >= 5)
                        ws.Cells[10, 2, 10, 1 + colWidth * summaryFin.Count].Merge = true;
                    else
                        ws.Cells[10, 2, 10, 10].Merge = true;

                    for (int i = 0; i < summaryFin.Count; i++)
                    {
                        if (i > 0)
                        {
                            ws.Cells[fromRow, fromCol, toRow, toCol].Copy(ws.Cells[fromRow, fromCol + i * colWidth, toRow, toCol + i * colWidth]);
                        }

                        ws.Cells[fromRow, fromCol + i * colWidth].Value = "{0}-{1}".FormatWith(summaryFin[i].PspYear, summaryFin[i].PspYear + 1);

                        //Applications
                        ws.Cells[12, toCol + i * colWidth].Value = summaryFin[i].PspApply; ;

                        //Permits
                        ws.Cells[13, toCol + i * colWidth].Value = summaryFin[i].PspApproval;

                        //Application no Permit
                        ws.Cells[14, toCol + i * colWidth].Value = summaryFin[i].PspFail;

                        //Events
                        ws.Cells[15, toCol + i * colWidth].Value = summaryFin[i].PspEvent;

                        //Total Net Proceeds
                        ws.Cells[16, toCol + i * colWidth].Value = summaryFin[i].PspGrossProceedM;

                        //Total net proceeds raised
                        ws.Cells[17, toCol + i * colWidth].Value = summaryFin[i].PspNetProceedM;

                        for (int j = 0; j < colWidth; j++)
                            ws.Column(toCol + i * colWidth + j).Width = width;
                    }
                }

                if (summary.Count > 0)
                {
                    int fromRow = 22;
                    int fromCol = 2;
                    int toRow = 36;
                    int toCol = 3;
                    int colWidth = 2;

                    //Summary View in Calendar year
                    for (int i = 0; i < summary.Count; i++)
                    {
                        if (i > 0)
                        {
                            ws.Cells[fromRow, fromCol, toRow, 3].Copy(ws.Cells[fromRow, fromCol + i * 2, toRow, fromCol + i * 2]);
                        }

                        ws.Cells[fromRow, fromCol + i * colWidth].Value = summary[i].PspYear;

                        //Applications
                        ws.Cells[fromRow + 2, toCol + i * colWidth].Value = summary[i].PspApply;

                        //Permits
                        ws.Cells[fromRow + 3, toCol + i * colWidth].Value = summary[i].PspApproval;

                        //Application no Permit
                        //ws.Cells[fromRow + 1, toCol + i * colWidth].Value = summary[i].PspFail;

                        //Events
                        ws.Cells[fromRow + 4, toCol + i * colWidth].Value = summary[i].PspEvent;

                        //Total Net Proceeds
                        ws.Cells[fromRow + 5, toCol + i * colWidth].Value = summary[i].PspGrossProceedM;

                        //Total net proceeds raised
                        ws.Cells[fromRow + 6, toCol + i * colWidth].Value = summary[i].PspNetProceedM;
                    }
                }

                //Complaint
                if (complaint.Count > 0)
                {
                    int fromRow = 22;
                    int fromCol = 2;
                    int toCol = 3;
                    int colWidth = toCol - fromCol + 1;

                    for (int i = 0; i < complaint.Count; i++)
                    {
                        //if (i > 0)
                        //{
                        //    ws.Cells[fromRow, fromCol, toRow, 3].Copy(ws.Cells[fromRow, fromCol + i * 2, toRow, fromCol + i * 2]);
                        //}

                        //ws.Cells[fromRow, fromCol + i * colWidth].Value = complaint[i].PspYear;
                        ws.Cells[fromRow + 7, toCol + i * colWidth].Value = complaint[i].Police;
                        ws.Cells[fromRow + 8, toCol + i * colWidth].Value = complaint[i].Convicted;
                        ws.Cells[fromRow + 9, toCol + i * colWidth].Value = complaint[i].NFA;
                        ws.Cells[fromRow + 10, toCol + i * colWidth].Value = complaint[i].VerbalWarning;
                        ws.Cells[fromRow + 11, toCol + i * colWidth].Value = complaint[i].WrittenWarning;
                        ws.Cells[fromRow + 12, toCol + i * colWidth].Value = complaint[i].VerbalAdvice;
                        ws.Cells[fromRow + 13, toCol + i * colWidth].Value = complaint[i].WrittenAdvice;
                        ws.Cells[fromRow + 14, toCol + i * colWidth].Value = complaint[i].NoResult;
                    }

                    ws.Cells[fromRow + 1, fromCol, fromRow + 1, fromCol + complaint.Count * colWidth - 1].Merge = true;
                    ws.Cells[fromRow + 1, fromCol, fromRow + 1, fromCol + complaint.Count * colWidth - 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                }

                //Disaster Note - In Financial year
                if (disasterFin.Count > 0)
                {
                    int fromRow = 20;

                    ws.Cells[fromRow - 1, 1].Value = "Note:";
                    ws.Cells[fromRow - 1, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                    for (int i = 0; i < disasterFin.Count; i++)
                    {
                        ws.InsertRow(fromRow + i * 3, 3);
                        ws.Cells[fromRow + i * 3, 1, fromRow + i * 3 + 2, 1].Value = "{0}-{1}:".FormatWith(disasterFin[i].PspYear, (disasterFin[i].PspYear + 1).ToString().Substring(2, 2));
                        ws.Cells[fromRow + i * 3, 1, fromRow + i * 3 + 2, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        ws.Cells[fromRow + i * 3, 2, fromRow + i * 3 + 2, 2].IsRichText = true;

                        ExcelRichTextCollection rtfCollection = ws.Cells[fromRow + i * 3, 2].RichText;
                        ExcelRichText ert = rtfCollection.Add("Including ");

                        ert = rtfCollection.Add("{0}".FormatWith(disasterFin[i].Approval));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" permits issued which are related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disasterFin[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        rtfCollection = ws.Cells[fromRow + i * 3 + 1, 2].RichText;
                        ert = rtfCollection.Add("Including ");

                        ert = rtfCollection.Add("{0}".FormatWith(disasterFin[i].Event));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" events related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disasterFin[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        rtfCollection = ws.Cells[fromRow + i * 3 + 2, 2].RichText;
                        ert = rtfCollection.Add("Including a sum of ");

                        ert = rtfCollection.Add("${0:0.##} M".FormatWith(disasterFin[i].NetProceed));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" raised which are related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disasterFin[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;
                    }

                    //ws.Cells[fromRow - 1, 1, fromRow + disasterFin.Count * 3, 2].Copy(ws.Cells[39 + disasterFin.Count * 3, 1, 39 + disasterFin.Count * 6, 2]);
                }

                if (disaster.Count > 0)
                {
                    int fromRow = 39 + disasterFin.Count * 3;

                    ws.Cells[fromRow - 1, 1].Value = "Note:";
                    ws.Cells[fromRow - 1, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                    for (int i = 0; i < disaster.Count; i++)
                    {
                        ws.InsertRow(fromRow + i * 3, 3);
                        ws.Cells[fromRow + i * 3, 1, fromRow + i * 3 + 2, 1].Value = "{0}:".FormatWith(disaster[i].PspYear);
                        ws.Cells[fromRow + i * 3, 1, fromRow + i * 3 + 2, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        ws.Cells[fromRow + i * 3, 2, fromRow + i * 3 + 2, 2].IsRichText = true;

                        ExcelRichTextCollection rtfCollection = ws.Cells[fromRow + i * 3, 2].RichText;
                        ExcelRichText ert = rtfCollection.Add("Including ");

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].Approval));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" permits issued which are related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        rtfCollection = ws.Cells[fromRow + i * 3 + 1, 2].RichText;
                        ert = rtfCollection.Add("Including ");

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].Event));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" events related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        rtfCollection = ws.Cells[fromRow + i * 3 + 2, 2].RichText;
                        ert = rtfCollection.Add("Including a sum of ");

                        ert = rtfCollection.Add("${0:0.##} M".FormatWith(disaster[i].NetProceed));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" raised which are related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;
                    }
                }

                //PSP Raw Data
                ws = package.Workbook.Worksheets[2];
                if (raw.Count > 0)
                {
                    int fromRow = 1;
                    int fromCol = 1;
                    int toRow = 18;
                    int toCol = 17;
                    int interval = 1;

                    int curRow = fromRow;
                    int curYr = -1;

                    const int summaryRow = 15;

                    for (int i = 1; i <= toYear - fromYear; i++)
                    {
                        ws.Cells[fromRow, fromCol, toRow, toCol].Copy(ws.Cells[fromRow + i * (toRow - fromRow + 1 + interval), fromCol, toRow + i * (toRow - fromRow + 1 + interval), toCol]);
                    }

                    for (int i = 0; i < raw.Count; i++)
                    {
                        if (curYr != raw[i].PspYear)
                        {
                            curYr = raw[i].PspYear;
                            curRow = fromRow + (curYr - fromYear.Value) * (toRow - fromRow + interval + 1) + 1;

                            ws.Cells[curRow, 1].Value = ws.Cells[curRow, 1].Text.FormatWith(raw[i].PspYear - 1);
                            ws.Cells[curRow + 12, 1].Value = ws.Cells[curRow + 12, 1].Value.ToString().FormatWith(raw[i].PspYear + 1);
                            ws.Cells[curRow + 13, 1].Value = ws.Cells[curRow + 13, 1].Value.ToString().FormatWith(raw[i].PspYear);
                            curRow += 1;

                            var bf = _lookupService.GetDescription(LookupType.PspBroughtForward, "B/F from {0}".FormatWith(raw[i].PspYear - 1));
                            if (bf.IsNotNullOrEmpty())
                                ws.Cells[curRow - 1, 15].Value = bf;

                            //Finanical Year Summary
                            R01RawDto prevSum = rawSummary.Single(x => x.PspYear == curYr - 1);
                            ws.Cells[curRow + summaryRow, 1].Value = "{0}-{1}".FormatWith(curYr - 1, curYr.ToString().Substring(2));

                            ws.Cells[curRow + summaryRow, 2].Value = prevSum.PspReceived;
                            ws.Cells[curRow + summaryRow, 3].Value = prevSum.PspNotRequired;
                            ws.Cells[curRow + summaryRow, 4].Value = prevSum.PspRejected;

                            ws.Cells[curRow + summaryRow, 6].Value = prevSum.EventCancelled;
                            ws.Cells[curRow + summaryRow, 8].Value = prevSum.AppWithdrawn;
                            ws.Cells[curRow + summaryRow, 9].Value = prevSum.CaseClose;
                            ws.Cells[curRow + summaryRow, 10].Value = prevSum.CaseCloseOthers;
                            ws.Cells[curRow + summaryRow, 11].Value = prevSum.PspApproved;
                            ws.Cells[curRow + summaryRow, 13].Value = prevSum.PspSubvented;
                            ws.Cells[curRow + summaryRow, 14].Value = prevSum.NoOfEvent;

                            ws.Cells[curRow + summaryRow, 16].Value = prevSum.GrossProceed;
                            ws.Cells[curRow + summaryRow, 17].Value = prevSum.NetProceed;
                        }

                        //ws.Cells[curRow + breakdown[i].Level, 1].Style.Numberformat.Format = "mmm-yy";                        

                        ws.Cells[curRow + raw[i].Level, 1].Formula = "DATE({0},{1},1)".FormatWith(raw[i].PspYear, raw[i].Level + 1);

                        ws.Cells[curRow + raw[i].Level, 2].Value = raw[i].PspReceived;
                        ws.Cells[curRow + raw[i].Level, 3].Value = raw[i].PspNotRequired;
                        ws.Cells[curRow + raw[i].Level, 4].Value = raw[i].PspRejected;

                        ws.Cells[curRow + raw[i].Level, 6].Value = raw[i].EventCancelled;
                        ws.Cells[curRow + raw[i].Level, 8].Value = raw[i].AppWithdrawn;
                        ws.Cells[curRow + raw[i].Level, 9].Value = raw[i].CaseClose;
                        ws.Cells[curRow + raw[i].Level, 10].Value = raw[i].CaseCloseOthers;
                        ws.Cells[curRow + raw[i].Level, 11].Value = raw[i].PspApproved;
                        ws.Cells[curRow + raw[i].Level, 13].Value = raw[i].PspSubvented;
                        ws.Cells[curRow + raw[i].Level, 14].Value = raw[i].NoOfEvent;
                        ws.Cells[curRow + raw[i].Level, 16].Value = raw[i].GrossProceed;
                        ws.Cells[curRow + raw[i].Level, 17].Value = raw[i].NetProceed;
                    }
                }

                //Complaint & Enquiry Breakdown
                //ws = package.Workbook.Worksheets[3];
                //if (breakdown.Count > 0)
                //{
                //    int fromRow = 3;
                //    int fromCol = 1;
                //    int toRow = fromRow + 17;
                //    int toCol = 10;
                //    int curYr = -1;
                //    int curRow = fromRow;

                // for (int i = 1; i <= toYear - fromYear; i++) { ws.Cells[fromRow, fromCol, toRow,
                // toCol].Copy(ws.Cells[fromRow + i * 18, fromCol, toRow + i * 17, toCol]); }

                // for (int i = 0; i < breakdown.Count; i++) { if (curYr != breakdown[i].Yr) { curYr
                // = breakdown[i].Yr; curRow = fromRow + (curYr - fromYear.Value) * 18 + 2;

                // ws.Cells[curRow - 1, 1].Value = ws.Cells[curRow - 1,
                // 1].Value.ToString().FormatWith(breakdown[i].Yr - 1); ws.Cells[curRow + 12,
                // 1].Value = ws.Cells[curRow + 12, 1].Value.ToString().FormatWith(breakdown[i].Yr +
                // 1); ws.Cells[curRow + 13, 1].Value = ws.Cells[curRow + 13,
                // 1].Value.ToString().FormatWith(breakdown[i].Yr); ws.Cells[curRow + 14, 1].Value =
                // ws.Cells[curRow + 14, 1].Value.ToString().FormatWith(breakdown[i].Yr - 1,
                // breakdown[i].Yr); }

                // //ws.Cells[curRow + breakdown[i].Level, 1].Style.Numberformat.Format = "mmm-yy";
                // ws.Cells[curRow + breakdown[i].Level, 1].Formula =
                // "DATE({0},{1},1)".FormatWith(breakdown[i].Yr, breakdown[i].Level + 1);

                //        ws.Cells[curRow + breakdown[i].Level, 2].Value = breakdown[i].Telephone;
                //        ws.Cells[curRow + breakdown[i].Level, 3].Value = breakdown[i].Written;
                //        ws.Cells[curRow + breakdown[i].Level, 4].Value = breakdown[i].From1823;
                //        ws.Cells[curRow + breakdown[i].Level, 5].Value = breakdown[i].Mass;
                //        ws.Cells[curRow + breakdown[i].Level, 6].Value = breakdown[i].DC;
                //        ws.Cells[curRow + breakdown[i].Level, 7].Value = breakdown[i].LegC;
                //        ws.Cells[curRow + breakdown[i].Level, 8].Value = breakdown[i].Other;
                //        ws.Cells[curRow + breakdown[i].Level, 10].Value = breakdown[i].Police;
                //    }
                //}

                package.Save();
            }

            return resultStream;
        }

        #endregion R1

        #region R1

        public System.IO.MemoryStream GenerateR27Excel(string templatePath, int? fromYear, int? toYear)
        {
            IList<R27SummaryDto> summary = this._reportRepository.GetR27SummaryViewReport(fromYear, toYear);
            IList<R27SummaryFinDto> summaryFin = this._reportRepository.GetR27SummaryFinViewReport(fromYear, toYear);
            IList<R2SummaryComplaintDto> complaint = this._reportRepository.GetR27SummaryComplaintViewReport(fromYear, toYear);

            //Disaster Summary
            IList<R2SummaryDisasterDto> disaster = this._reportRepository.GetR27SummaryDisasterViewReport(fromYear, toYear);
            IList<R2SummaryDisasterDto> disasterFin = this._reportRepository.GetR27SummaryFinDisasterViewReport(fromYear, toYear);

            IList<R01RawDto> raw = this._reportRepository.GetR27RawViewReport(fromYear, toYear);
            IList<R01RawDto> rawSummary = this._reportRepository.GetR27RawSummaryViewReport(fromYear - 1, toYear - 1);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                double width = PixeltoWidth(89);

                var ws = package.Workbook.Worksheets[1];

                #region Summary view in Financial year
                if (summaryFin.Count > 0)
                {
                    int fromRow = 11;
                    int fromCol = 2;
                    int toRow = 25;
                    int toCol = 3;
                    int colWidth = 2;

                    ws.Cells[5, 1].Value = GeneratedBy();
                    ws.Cells[8, 1].Value = "Report Year:{0}".FormatWith(DateFromTo(fromYear, toYear));
                    ws.Cells[10, 2].Value = ws.Cells[10, 2].Value.ToString().FormatWith(fromYear, toYear);

                    if (summaryFin.Count >= 5)
                        ws.Cells[10, 2, 10, 1 + colWidth * summaryFin.Count].Merge = true;
                    else
                        ws.Cells[10, 2, 10, 10].Merge = true;

                    for (int i = 0; i < summaryFin.Count; i++)
                    {
                        int startRowIndex = 15;
                        if (i > 0)
                        {
                            ws.Cells[fromRow, fromCol, toRow, toCol].Copy(ws.Cells[fromRow, fromCol + i * colWidth, toRow, toCol + i * colWidth]);
                        }

                        ws.Cells[fromRow, fromCol + i * colWidth].Value = "{0}-{1}".FormatWith(summaryFin[i].PspYear, summaryFin[i].PspYear + 1);

                        //Applications
                        ws.Cells[startRowIndex, fromCol + i * colWidth].Value = summaryFin[i].SsafApplyNormal;
                        ws.Cells[startRowIndex, toCol + i * colWidth].Value = summaryFin[i].SsafApplyAmend;

                        //Permits
                        ws.Cells[startRowIndex + 2, fromCol + i * colWidth].Value = summaryFin[i].SsafApprovalNormal;
                        ws.Cells[startRowIndex + 2, toCol + i * colWidth].Value = summaryFin[i].SsafApprovalAmend;

                        //Application no Permit
                        ws.Cells[startRowIndex + 4, fromCol + i * colWidth].Value = summaryFin[i].SsafFailNormal;
                        ws.Cells[startRowIndex + 4, toCol + i * colWidth].Value = summaryFin[i].SsafFailAmend;

                        //Events
                        ws.Cells[startRowIndex + 6, fromCol + i * colWidth].Value = summaryFin[i].SsafEventNormal;
                        ws.Cells[startRowIndex + 6, toCol + i * colWidth].Value = summaryFin[i].SsafEventAmend;

                        //Total Net Proceeds
                        ws.Cells[startRowIndex + 8, fromCol + i * colWidth].Value = summaryFin[i].SsafGrossProceedMNormal;
                        ws.Cells[startRowIndex + 8, toCol + i * colWidth].Value = summaryFin[i].SsafGrossProceedMAmend;

                        //Total net proceeds raised
                        ws.Cells[startRowIndex + 10, fromCol + i * colWidth].Value = summaryFin[i].SsafNetProceedMNormal;
                        ws.Cells[startRowIndex + 10, toCol + i * colWidth].Value = summaryFin[i].SsafNetProceedMAmend;

                        for (int j = 0; j < colWidth; j++)
                            ws.Column(toCol + i * colWidth + j).Width = width;
                    }
                }
                #endregion

                #region Summary view
                if (summary.Count > 0)
                {
                    int fromRow = 30;
                    int fromCol = 2;
                    int toRow = 50;
                    int toCol = 3;
                    int colWidth = 2;

                    //Summary View in Calendar year
                    for (int i = 0; i < summary.Count; i++)
                    {
                        if (i > 0)
                        {
                            ws.Cells[fromRow, fromCol, toRow, 3].Copy(ws.Cells[fromRow, fromCol + i * 2, toRow, fromCol + i * 2]);
                        }

                        ws.Cells[fromRow, fromCol + i * colWidth].Value = summary[i].PspYear;

                        //Applications
                        int currentRowIndex = fromRow + 4;
                        ws.Cells[currentRowIndex, toCol + i * colWidth - 1].Value = summary[i].PspApplyParent;
                        ws.Cells[currentRowIndex, toCol + i * colWidth].Value = summary[i].PspApplyAmend;

                        //Permits
                        currentRowIndex += 2;
                        ws.Cells[currentRowIndex, toCol + i * colWidth - 1].Value = summary[i].PspApprovalParent;
                        ws.Cells[currentRowIndex, toCol + i * colWidth].Value = summary[i].PspApprovalAmend;

                        //Application no Permit
                        //ws.Cells[fromRow + 1, toCol + i * colWidth].Value = summary[i].PspFail;

                        //Events
                        currentRowIndex += 2;
                        ws.Cells[currentRowIndex, toCol + i * colWidth - 1].Value = summary[i].PspEventParent;
                        ws.Cells[currentRowIndex, toCol + i * colWidth].Value = summary[i].PspEventAmend;

                        //Total Net Proceeds
                        currentRowIndex += 2;
                        ws.Cells[currentRowIndex, toCol + i * colWidth - 1].Value = summary[i].PspGrossProceedMParent;
                        ws.Cells[currentRowIndex, toCol + i * colWidth].Value = summary[i].PspGrossProceedMAmend;

                        //Total net proceeds raised
                        currentRowIndex += 2;
                        ws.Cells[currentRowIndex, toCol + i * colWidth - 1].Value = summary[i].PspNetProceedMParent;
                        ws.Cells[currentRowIndex, toCol + i * colWidth].Value = summary[i].PspNetProceedMAmend;
                    }
                }
                #endregion

                #region Complaint
                if (complaint.Count > 0)
                {
                    int fromRow = 30;
                    int fromCol = 2;
                    int toCol = 3;
                    int colWidth = toCol - fromCol + 1;

                    for (int i = 0; i < complaint.Count; i++)
                    {
                        int currentRowIndex = fromRow + 13;
                        ws.Cells[currentRowIndex, toCol + i * colWidth - 1].Value = complaint[i].Police;
                        ws.Cells[currentRowIndex + 1, toCol + i * colWidth - 1].Value = complaint[i].Convicted;
                        ws.Cells[currentRowIndex + 2, toCol + i * colWidth - 1].Value = complaint[i].NFA;
                        ws.Cells[currentRowIndex + 3, toCol + i * colWidth - 1].Value = complaint[i].VerbalWarning;
                        ws.Cells[currentRowIndex + 4, toCol + i * colWidth - 1].Value = complaint[i].WrittenWarning;
                        ws.Cells[currentRowIndex + 5, toCol + i * colWidth - 1].Value = complaint[i].VerbalAdvice;
                        ws.Cells[currentRowIndex + 6, toCol + i * colWidth - 1].Value = complaint[i].WrittenAdvice;
                        ws.Cells[currentRowIndex + 7, toCol + i * colWidth - 1].Value = complaint[i].NoResult;
                    }

                    ws.Cells[fromRow + 1, fromCol, fromRow + 1, fromCol + complaint.Count * colWidth - 1].Merge = true;
                    ws.Cells[fromRow + 1, fromCol, fromRow + 1, fromCol + complaint.Count * colWidth - 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                }
                #endregion

                #region Disaster Note - In Financial year
                if (disasterFin.Count > 0)
                {
                    int fromRow = 28;

                    ws.Cells[fromRow - 1, 1].Value = "Note:";
                    ws.Cells[fromRow - 1, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                    for (int i = 0; i < disasterFin.Count; i++)
                    {
                        ws.InsertRow(fromRow + i * 3, 3);
                        ws.Cells[fromRow + i * 3, 1, fromRow + i * 3 + 2, 1].Value = "{0}-{1}:".FormatWith(disasterFin[i].PspYear, (disasterFin[i].PspYear + 1).ToString().Substring(2, 2));
                        ws.Cells[fromRow + i * 3, 1, fromRow + i * 3 + 2, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        ws.Cells[fromRow + i * 3, 2, fromRow + i * 3 + 2, 2].IsRichText = true;

                        ExcelRichTextCollection rtfCollection = ws.Cells[fromRow + i * 3, 2].RichText;
                        ExcelRichText ert = rtfCollection.Add("Including ");

                        ert = rtfCollection.Add("{0}".FormatWith(disasterFin[i].Approval));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" permits issued which are related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disasterFin[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        rtfCollection = ws.Cells[fromRow + i * 3 + 1, 2].RichText;
                        ert = rtfCollection.Add("Including ");

                        ert = rtfCollection.Add("{0}".FormatWith(disasterFin[i].Event));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" events related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disasterFin[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        rtfCollection = ws.Cells[fromRow + i * 3 + 2, 2].RichText;
                        ert = rtfCollection.Add("Including a sum of ");

                        ert = rtfCollection.Add("${0:0.##} M".FormatWith(disasterFin[i].NetProceed));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" raised which are related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disasterFin[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;
                    }

                    //ws.Cells[fromRow - 1, 1, fromRow + disasterFin.Count * 3, 2].Copy(ws.Cells[39 + disasterFin.Count * 3, 1, 39 + disasterFin.Count * 6, 2]);
                }
                #endregion

                #region Disaster Note 
                if (disaster.Count > 0)
                {
                    int fromRow = 53 + disasterFin.Count * 3;

                    ws.Cells[fromRow - 1, 1].Value = "Note:";
                    ws.Cells[fromRow - 1, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                    for (int i = 0; i < disaster.Count; i++)
                    {
                        ws.InsertRow(fromRow + i * 3, 3);
                        ws.Cells[fromRow + i * 3, 1, fromRow + i * 3 + 2, 1].Value = "{0}:".FormatWith(disaster[i].PspYear);
                        ws.Cells[fromRow + i * 3, 1, fromRow + i * 3 + 2, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        ws.Cells[fromRow + i * 3, 2, fromRow + i * 3 + 2, 2].IsRichText = true;

                        ExcelRichTextCollection rtfCollection = ws.Cells[fromRow + i * 3, 2].RichText;
                        ExcelRichText ert = rtfCollection.Add("Including ");

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].Approval));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" permits issued which are related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        rtfCollection = ws.Cells[fromRow + i * 3 + 1, 2].RichText;
                        ert = rtfCollection.Add("Including ");

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].Event));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" events related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        rtfCollection = ws.Cells[fromRow + i * 3 + 2, 2].RichText;
                        ert = rtfCollection.Add("Including a sum of ");

                        ert = rtfCollection.Add("${0:0.##} M".FormatWith(disaster[i].NetProceed));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" raised which are related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;
                    }
                }
                #endregion

                #region PSP Raw Data
                ws = package.Workbook.Worksheets[2];
                if (raw.Count > 0)
                {
                    int fromRow = 1;
                    int fromCol = 1;
                    int toRow = 18;
                    int toCol = 17;
                    int interval = 1;

                    int curRow = fromRow;
                    int curYr = -1;

                    const int summaryRow = 15;

                    for (int i = 1; i <= toYear - fromYear; i++)
                    {
                        ws.Cells[fromRow, fromCol, toRow, toCol].Copy(ws.Cells[fromRow + i * (toRow - fromRow + 1 + interval), fromCol, toRow + i * (toRow - fromRow + 1 + interval), toCol]);
                    }

                    for (int i = 0; i < raw.Count; i++)
                    {
                        if (curYr != raw[i].PspYear)
                        {
                            curYr = raw[i].PspYear;
                            curRow = fromRow + (curYr - fromYear.Value) * (toRow - fromRow + interval + 1) + 1;

                            ws.Cells[curRow, 1].Value = ws.Cells[curRow, 1].Text.FormatWith(raw[i].PspYear - 1);
                            ws.Cells[curRow + 12, 1].Value = ws.Cells[curRow + 12, 1].Value.ToString().FormatWith(raw[i].PspYear + 1);
                            ws.Cells[curRow + 13, 1].Value = ws.Cells[curRow + 13, 1].Value.ToString().FormatWith(raw[i].PspYear);
                            curRow += 1;

                            var bf = _lookupService.GetDescription(LookupType.SsafBroughtForward, "B/F from {0}".FormatWith(raw[i].PspYear - 1));
                            if (bf.IsNotNullOrEmpty())
                                ws.Cells[curRow - 1, 15].Value = bf;

                            //Finanical Year Summary
                            R01RawDto prevSum = rawSummary.Single(x => x.PspYear == curYr - 1);
                            ws.Cells[curRow + summaryRow, 1].Value = "{0}-{1}".FormatWith(curYr - 1, curYr.ToString().Substring(2));

                            ws.Cells[curRow + summaryRow, 2].Value = prevSum.PspReceived;
                            ws.Cells[curRow + summaryRow, 3].Value = prevSum.PspNotRequired;
                            ws.Cells[curRow + summaryRow, 4].Value = prevSum.PspRejected;

                            ws.Cells[curRow + summaryRow, 6].Value = prevSum.EventCancelled;
                            ws.Cells[curRow + summaryRow, 8].Value = prevSum.AppWithdrawn;
                            ws.Cells[curRow + summaryRow, 9].Value = prevSum.CaseClose;
                            ws.Cells[curRow + summaryRow, 10].Value = prevSum.CaseCloseOthers;
                            ws.Cells[curRow + summaryRow, 11].Value = prevSum.PspApproved;
                            ws.Cells[curRow + summaryRow, 13].Value = prevSum.PspSubvented;
                            ws.Cells[curRow + summaryRow, 14].Value = prevSum.NoOfEvent;

                            ws.Cells[curRow + summaryRow, 16].Value = prevSum.GrossProceed;
                            ws.Cells[curRow + summaryRow, 17].Value = prevSum.NetProceed;
                        }

                        ws.Cells[curRow + raw[i].Level, 1].Formula = "DATE({0},{1},1)".FormatWith(raw[i].PspYear, raw[i].Level + 1);

                        ws.Cells[curRow + raw[i].Level, 2].Value = raw[i].PspReceived;
                        ws.Cells[curRow + raw[i].Level, 3].Value = raw[i].PspNotRequired;
                        ws.Cells[curRow + raw[i].Level, 4].Value = raw[i].PspRejected;

                        ws.Cells[curRow + raw[i].Level, 6].Value = raw[i].EventCancelled;
                        ws.Cells[curRow + raw[i].Level, 8].Value = raw[i].AppWithdrawn;
                        ws.Cells[curRow + raw[i].Level, 9].Value = raw[i].CaseClose;
                        ws.Cells[curRow + raw[i].Level, 10].Value = raw[i].CaseCloseOthers;
                        ws.Cells[curRow + raw[i].Level, 11].Value = raw[i].PspApproved;
                        ws.Cells[curRow + raw[i].Level, 13].Value = raw[i].PspSubvented;
                        ws.Cells[curRow + raw[i].Level, 14].Value = raw[i].NoOfEvent;
                        ws.Cells[curRow + raw[i].Level, 16].Value = raw[i].GrossProceed;
                        ws.Cells[curRow + raw[i].Level, 17].Value = raw[i].NetProceed;
                    }
                }
                #endregion
                package.Save();
            }

            return resultStream;
        }

        #endregion R1

        #region R2

        public System.IO.MemoryStream GenerateR2Excel(string templatePath, int? fromYear, int? toYear)
        {
            IList<R2SummaryDto> summary = this._reportRepository.GetR2SummaryViewReport(fromYear, toYear);
            IList<R2SummaryDisasterDto> disaster = this._reportRepository.GetR2SummaryDisasterViewReport(fromYear, toYear);
            IList<R2SummaryComplaintDto> complaint = this._reportRepository.GetR2SummaryComplaintViewReport(fromYear, toYear);
            IList<R3BreakdownDto> breakdown = this._reportRepository.GetR2BreakdownViewReport(fromYear, toYear);
            IList<R3BreakdownDto> breakdownSummary = this._reportRepository.GetR2BreakdownSummaryViewReport(fromYear - 1, toYear - 1);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                double width = PixeltoWidth(68);
                double widthAmendment = PixeltoWidth(85);

                var ws = package.Workbook.Worksheets[1];
                if (summary.Count > 0)
                {
                    int fromRow = 11;
                    int fromCol = 2;
                    int toRow = 31;
                    //int toCol = 4;
                    int toCol = 6;

                    ws.Cells[5, 1].Value = GeneratedBy();
                    ws.Cells[8, 1].Value = ws.Cells[8, 1].Text.FormatWith(DateFromTo(fromYear, toYear));
                    ws.Cells[10, 2].Value = "Statistical Summary of Public Subscription Permit {2} ({0} to {1})".FormatWith(fromYear, toYear, Environment.NewLine);

                    int summaryColumnCnt = 5;
                    if (summary.Count > summaryColumnCnt)
                        ws.Cells[10, 2, 10, 1 + summaryColumnCnt * summary.Count].Merge = true;
                    else
                        ws.Cells[10, 2, 10, 11].Merge = true;

                    for (int i = 0; i < summary.Count; i++)
                    {
                        if (i > 0)
                        {
                            ws.Cells[fromRow, fromCol, toRow, toCol].Copy(ws.Cells[fromRow, toCol + (i - 1) * summaryColumnCnt + 1, toRow, toCol + i * summaryColumnCnt]);
                        }

                        ws.Cells[fromRow, fromCol + i * summaryColumnCnt].Value = "{0}-{1}".FormatWith(summary[i].PspYear, (summary[i].PspYear + 1).ToString().Substring(2, 2));

                        //Applications
                        ws.Cells[14, fromCol + i * summaryColumnCnt].Value = summary[i].PspApply;
                        ws.Cells[15, fromCol + i * summaryColumnCnt + 1].Value = summary[i].ApplyTWR;
                        ws.Cells[15, fromCol + i * summaryColumnCnt + 2].Value = summary[i].ApplyRFD;                        
                        ws.Cells[15, fromCol + i * summaryColumnCnt + 3].Value = summary[i].SsafApplyNormal;
                        ws.Cells[15, fromCol + i * summaryColumnCnt + 4].Value = summary[i].SsafApplyAmend;

                        //Permits
                        ws.Cells[17, fromCol + i * summaryColumnCnt].Value = summary[i].PspApproval;
                        ws.Cells[18, fromCol + i * summaryColumnCnt + 1].Value = summary[i].FlagDayTWR;
                        ws.Cells[18, fromCol + i * summaryColumnCnt + 2].Value = summary[i].FlagDayRFD;
                        ws.Cells[18, fromCol + i * summaryColumnCnt + 3].Value = summary[i].SsafApprovalNormal;
                        ws.Cells[18, fromCol + i * summaryColumnCnt + 4].Value = summary[i].SsafApprovalAmend;

                        //Unsuccessful
                        ws.Cells[20, fromCol + i * summaryColumnCnt].Value = summary[i].PspFail;
                        ws.Cells[21, fromCol + i * summaryColumnCnt + 1].Value = summary[i].FailTWR;
                        ws.Cells[21, fromCol + i * summaryColumnCnt + 2].Value = summary[i].FailRFD;
                        ws.Cells[21, fromCol + i * summaryColumnCnt + 3].Value = summary[i].SsafFailNormal;
                        ws.Cells[21, fromCol + i * summaryColumnCnt + 4].Value = summary[i].SsafFailAmend;

                        //Events
                        ws.Cells[23, fromCol + i * summaryColumnCnt].Value = summary[i].PspEvent;
                        ws.Cells[24, fromCol + i * summaryColumnCnt + 1].Value = summary[i].FlagDayTWR;
                        ws.Cells[24, fromCol + i * summaryColumnCnt + 2].Value = summary[i].FlagDayRFD;
                        ws.Cells[24, fromCol + i * summaryColumnCnt + 3].Value = summary[i].SsafEventNormal;
                        ws.Cells[24, fromCol + i * summaryColumnCnt + 4].Value = summary[i].SsafEventAmend;

                        //Total Net Proceeds
                        ws.Cells[26, fromCol + i * summaryColumnCnt].Value = summary[i].PspGrossProceedM;
                        ws.Cells[27, fromCol + i * summaryColumnCnt + 1].Value = summary[i].SumGrossTWRM;
                        ws.Cells[27, fromCol + i * summaryColumnCnt + 2].Value = summary[i].SumGrossRFDM;
                        ws.Cells[27, fromCol + i * summaryColumnCnt + 3].Value = summary[i].SsafGrossProceedMNormal;
                        ws.Cells[27, fromCol + i * summaryColumnCnt + 4].Value = summary[i].SsafGrossProceedMAmend;

                        //Total net proceeds raised
                        ws.Cells[29, fromCol + i * summaryColumnCnt].Value = summary[i].PspNetProceedM;
                        ws.Cells[30, fromCol + i * summaryColumnCnt + 1].Value = summary[i].SumNetTWRM;
                        ws.Cells[30, fromCol + i * summaryColumnCnt + 2].Value = summary[i].SumNetRFDM;
                        ws.Cells[30, fromCol + i * summaryColumnCnt + 3].Value = summary[i].SsafNetProceedMNormal;
                        ws.Cells[30, fromCol + i * summaryColumnCnt + 4].Value = summary[i].SsafNetProceedMAmend;

                        for (int j = 0; j < summaryColumnCnt; j++)
                        {
                            int columnIdxSetForWidth = fromCol + i * summaryColumnCnt + j;
                            if (!(j % 4 == 0))
                                ws.Column(columnIdxSetForWidth).Width = width;
                            else
                                ws.Column(columnIdxSetForWidth).Width = widthAmendment;
                        }
                    }
                }

                //Disaster Note
                if (disaster.Count > 0)
                {
                    int fromRow = 34;

                    ws.Cells[fromRow - 1, 1].Value = "Note:";
                    ws.Cells[fromRow - 1, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                    for (int i = 0; i < disaster.Count; i++)
                    {
                        ws.InsertRow(fromRow + i * 3, 3);
                        ws.Cells[fromRow + i * 3, 1, fromRow + i * 3 + 2, 1].Value = "{0}-{1}:".FormatWith(disaster[i].PspYear, (disaster[i].PspYear + 1).ToString().Substring(2, 2));
                        ws.Cells[fromRow + i * 3, 1, fromRow + i * 3 + 2, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        ws.Cells[fromRow + i * 3, 2, fromRow + i * 3 + 2, 2].IsRichText = true;

                        ExcelRichTextCollection rtfCollection = ws.Cells[fromRow + i * 3, 2].RichText;
                        ExcelRichText ert = rtfCollection.Add("Including ");

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].Approval));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" permits issued which are related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        rtfCollection = ws.Cells[fromRow + i * 3 + 1, 2].RichText;
                        ert = rtfCollection.Add("Including ");

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].Event));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" events related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        rtfCollection = ws.Cells[fromRow + i * 3 + 2, 2].RichText;
                        ert = rtfCollection.Add("Including a sum of ");

                        ert = rtfCollection.Add("${0:0.##} M".FormatWith(disaster[i].NetProceed));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" raised which are related to the relief work of ");
                        ert.Bold = false;
                        ert.Italic = false;
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].DisasterName));
                        ert.Bold = true;
                        ert.Italic = true;
                        ert.UnderLine = true;
                    }
                }

                //Complaint
                if (complaint.Count > 0)
                {
                    int fromRow = 36 + disaster.Count * 3;
                    int fromCol = 2;
                    int toRow = 50 + disaster.Count * 3;

                    for (int i = 0; i < complaint.Count; i++)
                    {
                        if (i > 0)
                        {
                            ws.Cells[fromRow, fromCol, toRow, 3].Copy(ws.Cells[fromRow, fromCol + i * 2, toRow, fromCol + i * 2]);
                            ws.Cells[fromRow, fromCol + i * 2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                        }

                        ws.Cells[fromRow, fromCol + i * 2].Value = complaint[i].PspYear;
                        ws.Cells[fromRow + 2, fromCol + i * 2 + 1].Value = complaint[i].Police;
                        ws.Cells[fromRow + 3, fromCol + i * 2 + 1].Value = complaint[i].Convicted;
                        ws.Cells[fromRow + 4, fromCol + i * 2 + 1].Value = complaint[i].NFA;
                        ws.Cells[fromRow + 5, fromCol + i * 2 + 1].Value = complaint[i].VerbalWarning;
                        ws.Cells[fromRow + 6, fromCol + i * 2 + 1].Value = complaint[i].WrittenWarning;
                        ws.Cells[fromRow + 7, fromCol + i * 2 + 1].Value = complaint[i].VerbalAdvice;
                        ws.Cells[fromRow + 8, fromCol + i * 2 + 1].Value = complaint[i].WrittenAdvice;
                        ws.Cells[fromRow + 9, fromCol + i * 2 + 1].Value = complaint[i].NoResult;
                    }

                    ws.Cells[fromRow + 1, fromCol, fromRow + 1, fromCol + complaint.Count * 2 - 1].Merge = true;
                    ws.Cells[fromRow + 1, fromCol, fromRow + 1, fromCol + complaint.Count * 2 - 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                }

                ws = package.Workbook.Worksheets[2];
                if (breakdown.Count > 0)
                {
                    int fromRow = 3;
                    int fromCol = 1;
                    int toRow = fromRow + 17;
                    int toCol = 12;
                    int curYr = -1;
                    int curRow = fromRow;
                    const int summaryRow = 14;

                    for (int i = 1; i <= toYear - fromYear; i++)
                    {
                        ws.Cells[fromRow, fromCol, toRow, toCol].Copy(ws.Cells[fromRow + i * 18, fromCol, toRow + i * 17, toCol]);
                    }

                    for (int i = 0; i < breakdown.Count; i++)
                    {
                        if (curYr != breakdown[i].Yr)
                        {
                            curYr = breakdown[i].Yr;
                            curRow = fromRow + (curYr - fromYear.Value) * 18 + 2;

                            ws.Cells[curRow - 1, 1].Value = "b/f {0}".FormatWith(breakdown[i].Yr - 1);
                            ws.Cells[curRow + 12, 1].Value = "c/f {0}".FormatWith(breakdown[i].Yr + 1);
                            ws.Cells[curRow + 13, 1].Value = "Total {0}".FormatWith(breakdown[i].Yr);
                            ws.Cells[curRow + summaryRow, 1].Value = "{0}-{1}".FormatWith(breakdown[i].Yr - 1, breakdown[i].Yr);

                            //Finanical Year Summary
                            R3BreakdownDto prevSum = breakdownSummary.Single(x => x.Yr == curYr - 1);
                            ws.Cells[curRow + summaryRow, 1].Value = "{0}-{1}".FormatWith(curYr - 1, curYr.ToString().Substring(2));

                            ws.Cells[curRow + summaryRow, 2].Value = prevSum.Telephone;
                            ws.Cells[curRow + summaryRow, 3].Value = prevSum.Written;
                            ws.Cells[curRow + summaryRow, 4].Value = prevSum.From1823;
                            ws.Cells[curRow + summaryRow, 5].Value = prevSum.Mass;
                            ws.Cells[curRow + summaryRow, 6].Value = prevSum.DC;
                            ws.Cells[curRow + summaryRow, 7].Value = prevSum.LegC;
                            ws.Cells[curRow + summaryRow, 8].Value = prevSum.Other;
                            ws.Cells[curRow + summaryRow, 9].Value = prevSum.FromPolice;
                            ws.Cells[curRow + summaryRow, 10].Value = prevSum.UnClass;
                            ws.Cells[curRow + summaryRow, 12].Value = prevSum.Police;
                        }

                        ws.Cells[curRow + breakdown[i].Level, 1].Value = "{0}-{1}".FormatWith(breakdown[i].Mon, breakdown[i].Yr.ToString().Substring(2, 2));
                        ws.Cells[curRow + breakdown[i].Level, 2].Value = breakdown[i].Telephone;
                        ws.Cells[curRow + breakdown[i].Level, 3].Value = breakdown[i].Written;
                        ws.Cells[curRow + breakdown[i].Level, 4].Value = breakdown[i].From1823;
                        ws.Cells[curRow + breakdown[i].Level, 5].Value = breakdown[i].Mass;
                        ws.Cells[curRow + breakdown[i].Level, 6].Value = breakdown[i].DC;
                        ws.Cells[curRow + breakdown[i].Level, 7].Value = breakdown[i].LegC;
                        ws.Cells[curRow + breakdown[i].Level, 8].Value = breakdown[i].Other;
                        ws.Cells[curRow + breakdown[i].Level, 9].Value = breakdown[i].FromPolice;
                        ws.Cells[curRow + breakdown[i].Level, 10].Value = breakdown[i].UnClass;
                        ws.Cells[curRow + breakdown[i].Level, 12].Value = breakdown[i].Police;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R2

        #region R3

        public System.IO.MemoryStream GenerateR3Excel(string templatePath, int? fromYear, int? toYear)
        {
            IList<R3SummaryDto> summary = this._reportRepository.GetR3SummaryViewReport(fromYear, toYear);
            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                //Summary
                var ws = package.Workbook.Worksheets[1];
                double width = PixeltoWidth(82);

                if (summary.Count > 0)
                {
                    int fromRow = 13;
                    int fromCol = 2;
                    int toRow = 25;
                    int toCol = 7;

                    ws.Cells[5, 1].Value = GeneratedBy();
                    ws.Cells[8, 1].Value = "Report Year:{0}".FormatWith(DateFromTo(fromYear, toYear));
                    ws.Cells[10, 1].Value = "Statistical Summary of Flag Day ({0} to {1})".FormatWith(fromYear, toYear);

                    ws.Cells[10, 1, 10, 1 + 6 * summary.Count].Merge = true;

                    for (int i = 0; i < summary.Count; i++)
                    {
                        if (i > 0)
                        {
                            ws.Cells[fromRow, fromCol, toRow, toCol].Copy(ws.Cells[fromRow, toCol + (i - 1) * 6 + 1, toRow, toCol + i * 6]);
                        }

                        ws.Cells[fromRow, fromCol + i * 6].Value = summary[i].FdYear;
                        //No. of flag days
                        ws.Cells[15, fromCol + i * 6].Value = summary[i].FlagDayTWR;
                        ws.Cells[15, fromCol + i * 6 + 3].Value = summary[i].FlagDayRFD;
                        //Details
                        ws.Cells[16, fromCol + i * 6].Value = "{0} Saturday(s)".FormatWith(summary[i].TWRSat);
                        ws.Cells[16, fromCol + i * 6 + 1].Value = "{0} weekday(s)".FormatWith(summary[i].TWRWeekday);
                        ws.Cells[16, fromCol + i * 6 + 2].Value = "with {0} weekday(s) for Pledging".FormatWith(summary[i].TWRWeekdayPledging);
                        ws.Cells[16, fromCol + i * 6 + 3].Value = "{0} Saturday(s)".FormatWith(summary[i].RFDSat);
                        ws.Cells[16, fromCol + i * 6 + 4].Value = "{0} weekday(s)".FormatWith(summary[i].RFDWeekday);
                        ws.Cells[16, fromCol + i * 6 + 5].Value = "with {0} weekday(s) for Pledging".FormatWith(summary[i].RFDWeekdayPledging);

                        //No. of applications
                        ws.Cells[18, fromCol + i * 6].Value = summary[i].ApplyTWR;
                        ws.Cells[18, fromCol + i * 6 + 3].Value = summary[i].ApplyRFD;

                        //No. of flag day organisers
                        ws.Cells[20, fromCol + i * 6].Value = summary[i].OrgTWR;
                        ws.Cells[20, fromCol + i * 6 + 3].Value = summary[i].OrgRFD;

                        //Total net proceeds raised
                        ws.Cells[22, fromCol + i * 6].Value = summary[i].SumTWR;
                        ws.Cells[22, fromCol + i * 6 + 3].Value = summary[i].SumRFD;

                        for (int j = 0; j <= 5; j++)
                            ws.Column(fromCol + i * 6 + j).Width = width;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R3

        #region R4

        public System.IO.MemoryStream GenerateR4Excel(string templatePath, int? fromYear, int? toYear)
        {
            IList<R4MainDto> main = this._reportRepository.GetR4MainViewReport(fromYear, toYear);
            IList<R2SummaryDisasterDto> disaster = this._reportRepository.GetR2SummaryDisasterViewReport(fromYear, toYear);
            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                double width1 = PixeltoWidth(54);
                double width2 = PixeltoWidth(68);
                double width3 = PixeltoWidth(96);

                var ws = package.Workbook.Worksheets[1];
                if (main.Count > 0)
                {
                    int fromRow = 12;
                    int fromCol = 3;
                    int toRow = 37;
                    int toCol = 7;

                    int totalCol = toCol + 1;

                    ws.Cells[5, 1].Value = GeneratedBy();
                    ws.Cells[8, 1].Value = ws.Cells[8, 1].Text.FormatWith(DateFromTo(fromYear, toYear));

                    int repeatColumnNo = 5;
                    for (int i = 1; i < main.Count; i++)
                    {
                        ws.Cells[fromRow, totalCol, toRow, totalCol].Copy(ws.Cells[fromRow, fromCol + main.Count * repeatColumnNo + i - 1, fromRow, fromCol + main.Count * repeatColumnNo + i - 1]);
                        totalCol = fromCol + main.Count * repeatColumnNo + i - 1;
                        ws.Column(totalCol).Width = width3;

                        ws.Cells[fromRow, fromCol, toRow, toCol].Copy(ws.Cells[fromRow, fromCol + i * repeatColumnNo, toRow, toCol + i * repeatColumnNo]);
                        for (int j = 0; j < repeatColumnNo; j++)
                        {
                            double width;
                            if (j == 1)
                                width = width2;
                            else
                                width = width1;

                            ws.Column(fromCol + i * repeatColumnNo + j).Width = width;
                        }
                    }

                    for (int i = 0; i < main.Count; i++)
                    {
                        ws.Cells[fromRow, fromCol + i * repeatColumnNo].Value = ws.Cells[fromRow, fromCol + i * repeatColumnNo].Text.FormatWith(main[i].PspYear, (main[i].PspYear + 1).ToString().Substring(2));

                        //for (int j = 0; j < 4; j++)
                        //    ws.Cells[fromRow, fromCol + i * 4 + j].Value = ws.Cells[fromRow, fromCol + i * 4 + j].Value.ToString().FormatWith(main[i].PspYear, main[i].FdYear);

                        ws.Cells[15, fromCol + i * repeatColumnNo].Value = main[i].PspApply;
                        ws.Cells[16, fromCol + i * repeatColumnNo].Value = main[i].PspApproval;
                        ws.Cells[17, fromCol + i * repeatColumnNo].Value = main[i].PspEvent;

                        ws.Cells[19, fromCol + i * repeatColumnNo].Value = main[i].PspWritten;
                        ws.Cells[20, fromCol + i * repeatColumnNo].Value = main[i].PspTelephone;
                        ws.Cells[21, fromCol + i * repeatColumnNo].Value = main[i].Psp1823;
                        ws.Cells[22, fromCol + i * repeatColumnNo].Value = main[i].PspMass;
                        ws.Cells[23, fromCol + i * repeatColumnNo].Value = main[i].PspDC;
                        ws.Cells[24, fromCol + i * repeatColumnNo].Value = main[i].PspLegC;
                        ws.Cells[25, fromCol + i * repeatColumnNo].Value = main[i].PspOther;
                        ws.Cells[26, fromCol + i * repeatColumnNo].Value = main[i].PspFromPolice;
                        ws.Cells[27, fromCol + i * repeatColumnNo].Value = main[i].PspUnClass;

                        ws.Cells[30, fromCol + i * repeatColumnNo].Value = main[i].PspConvicted;
                        ws.Cells[31, fromCol + i * repeatColumnNo].Value = main[i].PspNFA;
                        ws.Cells[32, fromCol + i * repeatColumnNo].Value = main[i].PspVerbalWarning;
                        ws.Cells[33, fromCol + i * repeatColumnNo].Value = main[i].PspWrittenWarning;
                        ws.Cells[34, fromCol + i * repeatColumnNo].Value = main[i].PspVerbalAdvice;
                        ws.Cells[35, fromCol + i * repeatColumnNo].Value = main[i].PspWrittenAdvice;
                        ws.Cells[36, fromCol + i * repeatColumnNo].Value = main[i].PspNoResult;
                        ws.Cells[37, fromCol + i * repeatColumnNo].Value = main[i].PspPolice;

                        int columnShifted = 1;
                        ws.Cells[15, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdApply;
                        ws.Cells[16, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdEvent;
                        ws.Cells[17, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdEvent;

                        ws.Cells[19, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdWritten;
                        ws.Cells[20, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdTelephone;
                        ws.Cells[21, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].Fd1823;
                        ws.Cells[22, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdMass;
                        ws.Cells[23, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdDC;
                        ws.Cells[24, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdLegC;
                        ws.Cells[25, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdOther;
                        ws.Cells[26, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdFromPolice;
                        ws.Cells[27, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdUnClass;

                        ws.Cells[30, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdConvicted;
                        ws.Cells[31, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdNFA;
                        ws.Cells[32, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdVerbalWarning;
                        ws.Cells[33, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdWrittenWarning;
                        ws.Cells[34, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdVerbalAdvice;
                        ws.Cells[35, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdWrittenAdvice;
                        ws.Cells[36, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdNoResult;
                        ws.Cells[37, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].FdPolice;
                        
                        #region SSAF
                        columnShifted += 1;
                        ws.Cells[15, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafApply;
                        ws.Cells[16, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafApproval;
                        ws.Cells[17, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafEvent;

                        ws.Cells[19, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafWritten;
                        ws.Cells[20, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafTelephone;
                        ws.Cells[21, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].Ssaf1823;
                        ws.Cells[22, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafMass;
                        ws.Cells[23, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafDC;
                        ws.Cells[24, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafLegC;
                        ws.Cells[25, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafOther;
                        ws.Cells[26, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafFromPolice;
                        ws.Cells[27, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafUnClass;

                        ws.Cells[30, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafConvicted;
                        ws.Cells[31, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafNFA;
                        ws.Cells[32, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafVerbalWarning;
                        ws.Cells[33, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafWrittenWarning;
                        ws.Cells[34, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafVerbalAdvice;
                        ws.Cells[35, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafWrittenAdvice;
                        ws.Cells[36, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafNoResult;
                        ws.Cells[37, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].SsafPolice;
                        #endregion

                        columnShifted += 1;
                        ws.Cells[19, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherWritten;
                        ws.Cells[20, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherTelephone;
                        ws.Cells[21, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].Other1823;
                        ws.Cells[22, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherMass;
                        ws.Cells[23, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherDC;
                        ws.Cells[24, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherLegC;
                        ws.Cells[25, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherOther;
                        ws.Cells[26, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherFromPolice;
                        ws.Cells[27, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherUnClass;

                        ws.Cells[30, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherConvicted;
                        ws.Cells[31, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherNFA;
                        ws.Cells[32, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherVerbalWarning;
                        ws.Cells[33, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherWrittenWarning;
                        ws.Cells[34, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherVerbalAdvice;
                        ws.Cells[35, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherWrittenAdvice;
                        ws.Cells[36, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherNoResult;                        
                        ws.Cells[37, fromCol + i * repeatColumnNo + columnShifted].Value = main[i].OtherPolice;

                        if (totalCol - i > toCol + (main.Count - 1) * repeatColumnNo)
                        {
                            ws.Cells[fromRow, totalCol - i].Value = String.Format(ws.Cells[fromRow, totalCol - i].Text, toYear, (toYear + 1).ToString().Substring(2), main[i].PspYear, (main[i].PspYear + 1).ToString().Substring(2));
                            for (int j = 15; j <= toRow; j++)
                            {
                                if (j != 18)
                                    ws.Cells[j, totalCol - i].Formula = @"IF({1}=0, ""N/A"", ROUND(({0}-{1})/{1}, 2))".FormatWith(ws.Cells[j, toCol + (main.Count - 1) * repeatColumnNo].Address, ws.Cells[j, toCol + i * repeatColumnNo].Address);
                            }
                        }

                        if (i > 0)
                        {
                            ws.Cells[fromRow, totalCol - i, toRow, totalCol - i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (i < (main.Count) - 2)
                        {
                            ws.Cells[fromRow, totalCol - i, toRow, totalCol - i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        }
                    }
                }

                //Disaster Note
                if (disaster.Count > 0)
                {
                    int fromRow = 38;

                    for (int i = 0; i < disaster.Count; i++)
                    {
                        ws.Cells[fromRow + i, 1].Value = "Note {0}:".FormatWith(i + 1);
                        ws.Cells[fromRow + i, 1].Style.Font.Bold = true;

                        ws.Cells[fromRow + i, 2].IsRichText = true;
                        ExcelRichTextCollection rtfCollection = ws.Cells[fromRow + i, 2].RichText;
                        ExcelRichText ert = rtfCollection.Add("Figure in {0}-{1}: including ".FormatWith(disaster[i].PspYear, (disaster[i].PspYear + 1).ToString().Substring(2)));

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].Approval));
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" permits issued involving ");
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].Event));
                        ert.UnderLine = true;

                        ert = rtfCollection.Add(" events which are related to the relief work of ");
                        ert.UnderLine = false;

                        ert = rtfCollection.Add("{0}".FormatWith(disaster[i].DisasterName));
                        ert.UnderLine = true;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R4

        #region R5

        public System.IO.MemoryStream GenerateR5Excel(string templatePath, int year)
        {
            IList<R05_PspSummaryDto> pspSummary = this._reportRepository.GetR5PspViewReport(year);
            IList<R05_PspSummaryDto> ssafSummary = this._reportRepository.GetR5PspViewReport(year, true);
            IList<R05_FdSummaryDto> fdSummary = this._reportRepository.GetR5FdViewReport(year);
            IList<R05_SummaryDto> summary = this._reportRepository.GetR5SummaryViewReport(year);
            IList<R05_ComplaintDto> complaint = this._reportRepository.GetR5ComplaintViewReport(year);
            IList<R05_SentenceDto> sentence = this._reportRepository.GetR5SentenceViewReport(year);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                //PSP & FD Statistics
                var ws = package.Workbook.Worksheets[1];

                ws.Cells[5, 1].Value = GeneratedBy();
                ws.Cells[8, 1].Value = ws.Cells[8, 1].Text.FormatWith(year);
                ws.Cells[10, 1].Value = ws.Cells[10, 1].Text.FormatWith(year);

                ws.Cells[26, 1].Value = ws.Cells[26, 1].Text.FormatWith(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

                //Fill up the table from bottom
                if (summary.Count > 0)
                {
                    int startRow = 27;

                    if (summary.Count > 1)
                    {
                        ws.InsertRow(startRow + 1, summary.Count - 1, startRow);
                        ws.Cells[startRow, 1, startRow + summary.Count - 2, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Hair;
                    }

                    for (int i = 0; i < summary.Count; i++)
                    {
                        ws.Cells[startRow + i, 1].Value = "{0}-{1}".FormatWith(summary[i].PspYear, (summary[i].PspYear + 1).ToString().Substring(2, 2));
                        ws.Cells[startRow + i, 2].Value = summary[i].Permit;
                        ws.Cells[startRow + i, 3].Value = summary[i].OrgCnt;
                        ws.Cells[startRow + i, 4].Value = summary[i].NetProceed;

                        ws.Row(startRow + i).Height = ws.Row(startRow).Height;
                    }
                }

                #region SSAF
                if (ssafSummary.Count > 0)
                {
                    int startRow = 23;

                    if (ssafSummary.Count > 1)
                    {
                        ws.InsertRow(startRow + 1, ssafSummary.Count - 1, startRow);
                        ws.Cells[startRow, 1, startRow + ssafSummary.Count - 2, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Hair;
                    }

                    for (int i = 0; i < ssafSummary.Count; i++)
                    {
                        ws.Cells[startRow + i, 1].Value = "{0}-{1} ({0})".FormatWith(ssafSummary[i].PspYear, (ssafSummary[i].PspYear + 1).ToString().Substring(2, 2));
                        ws.Cells[startRow + i, 2].Value = ssafSummary[i].PspApproved;
                        ws.Cells[startRow + i, 3].Value = "({0})".FormatWith(ssafSummary[i].PspCalApproved);
                        ws.Cells[startRow + i, 4].Value = ssafSummary[i].PspOrgCnt;
                        ws.Cells[startRow + i, 5].Value = ssafSummary[i].NetProceed;

                        ws.Row(startRow + i).Height = ws.Row(startRow).Height;
                    }
                }
                #endregion

                if (pspSummary.Count > 0)
                {
                    int startRow = 19;

                    if (pspSummary.Count > 1)
                    {
                        ws.InsertRow(startRow + 1, pspSummary.Count - 1, startRow);
                        ws.Cells[startRow, 1, startRow + pspSummary.Count - 2, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Hair;
                    }

                    for (int i = 0; i < pspSummary.Count; i++)
                    {
                        ws.Cells[startRow + i, 1].Value = "{0}-{1} ({0})".FormatWith(pspSummary[i].PspYear, (pspSummary[i].PspYear + 1).ToString().Substring(2, 2));
                        ws.Cells[startRow + i, 2].Value = pspSummary[i].PspApproved;
                        ws.Cells[startRow + i, 3].Value = "({0})".FormatWith(pspSummary[i].PspCalApproved);
                        ws.Cells[startRow + i, 4].Value = pspSummary[i].PspOrgCnt;
                        ws.Cells[startRow + i, 5].Value = pspSummary[i].NetProceed;

                        ws.Row(startRow + i).Height = ws.Row(startRow).Height;
                    }
                }

                if (fdSummary.Count > 0)
                {
                    int startRow = 15;

                    if (fdSummary.Count > 1)
                    {
                        ws.InsertRow(startRow + 1, fdSummary.Count - 1, startRow);
                        ws.Cells[startRow, 1, startRow + fdSummary.Count - 2, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Hair;
                    }

                    for (int i = 0; i < fdSummary.Count; i++)
                    {
                        if (i > 0)
                            ws.Cells[startRow, 1, startRow, 5].Copy(ws.Cells[startRow + i, 1, startRow + i, 5]);

                        ws.Cells[startRow + i, 1].Value = "{0}-{1}".FormatWith(fdSummary[i].FdYear, (fdSummary[i].FdYear + 1).ToString().Substring(2, 2));
                        ws.Cells[startRow + i, 2].Value = fdSummary[i].FlagDayTWR;
                        ws.Cells[startRow + i, 3].Value = fdSummary[i].FlagDayRFD;
                        ws.Cells[startRow + i, 5].Value = fdSummary[i].NetProceed;

                        ws.Row(startRow + i).Height = ws.Row(startRow).Height;
                    }

                    ws.Cells[startRow + fdSummary.Count - 1, 1, startRow + fdSummary.Count - 1, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                }

                //PSP & FD Complaint
                ws = package.Workbook.Worksheets[2];

                ws.Cells[1, 1].Value = ws.Cells[1, 1].Text.FormatWith(year);

                ws.Cells[7, 1].Value = ws.Cells[7, 1].Text.FormatWith(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);

                if (complaint.Count > 0)
                {
                    int startRow = 5;
                    int remarkRow = 10 + complaint.Count - 1;
                    int remarkCnt = 0;

                    if (complaint.Count > 1)
                    {
                        ws.InsertRow(startRow + 1, complaint.Count - 1, startRow);
                        ws.Cells[startRow, 1, startRow + complaint.Count - 2, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Hair;
                    }

                    for (int i = 0; i < complaint.Count; i++)
                    {
                        ws.Cells[startRow + i, 1].Value = "{0}-{1}".FormatWith(complaint[i].PspYear, (complaint[i].PspYear + 1).ToString().Substring(2, 2));
                        ws.Cells[startRow + i, 2].Value = complaint[i].Permit;
                        ws.Cells[startRow + i, 3].Value = complaint[i].OrgCnt;
                        ws.Cells[startRow + i, 4].Value = complaint[i].NetProceed;
                        ws.Cells[startRow + i, 5].Value = complaint[i].ComplaintCnt;
                        ws.Cells[startRow + i, 6].Value = complaint[i].ChargeCnt;

                        var fine = sentence.Where(x => x.PspYear == complaint[i].PspYear).Select(x => new { x.SentenceDetail, x.OrgName }).ToArray();
                        if (fine.Count() > 0)
                        {
                            ExcelRichTextCollection rtfCollection = ws.Cells[startRow + i, 7].RichText;
                            ws.Cells[startRow + i, 7].Style.WrapText = true;

                            for (int j = 0; j < fine.Count(); j++)
                            {
                                remarkCnt++;

                                ExcelRichText ert = rtfCollection.Add("{0}".FormatWith(fine[j].SentenceDetail.IsNotNullOrEmpty() ? fine[j].SentenceDetail : " "));
                                ert.Italic = false;
                                ert = rtfCollection.Add("   R{0}{1}".FormatWith(remarkCnt, j < fine.Count() - 1 ? "\n" : ""));
                                ert.Italic = true;

                                ws.Cells[remarkRow + remarkCnt, 1].Value = "R{0}:  {1} 負責人/主席/副主席".FormatWith(remarkCnt, fine[j].OrgName);
                                ws.Cells[remarkRow + remarkCnt, 1].Style.Font.Italic = true;
                            }
                        }

                        ws.Row(startRow + i).Height = ws.Row(startRow).Height;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R5

        #region R6

        public System.IO.MemoryStream GenerateR6Excel(string templatePath, int disasterId)
        {
            var disaster = _disasterMasterService.GetDisasterMasterById(disasterId);
            string disasterName = disaster.DisasterName;

            int fromYear = disaster.BeginDate.Year;
            int toYear = disaster.EndDate.HasValue ? disaster.EndDate.Value.Year : DateTime.Now.Year;

            IList<R6SummaryDto> dataS = this._reportRepository.GetR6Summary(disasterId);
            IList<R6MonthlyDto> dataM = this._reportRepository.GetR6Monthly(disasterId, fromYear, toYear);

            MemoryStream resultStream = new MemoryStream();

            string indicator = "ü";

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];

                ws.Cells[5, 1].Value = GeneratedBy();
                ws.Cells[8, 1].Value = ws.Cells[8, 1].Text.FormatWith(disasterName);

                ws.Cells[10, 2].Value = ws.Cells[10, 2].Text.Replace("[DisasterName]", disasterName);

                int startRow = 14;
                int row = startRow;

                if (dataS.Count > 2)
                    ws.InsertRow(startRow + 1, dataS.Count - 2, startRow);

                for (int i = 0; i < dataS.Count; i++, row++)
                {
                    ws.Cells[row, 1].Value = i + 1;
                    ws.Cells[row, 2].Value = dataS[i].ApplicationReceiveDate.HasValue ? dataS[i].ApplicationReceiveDate.Value.ToString("dd/MM/yyyy") : "";
                    ws.Cells[row, 3].Value = dataS[i].EngOrgName;
                    ws.Cells[row, 4].Value = dataS[i].ChiOrgName;
                    ws.Cells[row, 5].Value = dataS[i].PspNonSect88Ind == 1 ? indicator : "";
                    ws.Cells[row, 6].Value = dataS[i].PspSect88Ind == 1 ? indicator : "";
                    ws.Cells[row, 7].Value = dataS[i].OrgNonSect88Ind == 1 ? indicator : "";
                    ws.Cells[row, 8].Value = dataS[i].OrgSect88Ind == 1 ? indicator : "";
                    ws.Cells[row, 9].Value = dataS[i].BeneficiaryOrg;
                    ws.Cells[row, 10].Value = dataS[i].ProcessingOfficerPost;
                    ws.Cells[row, 11].Value = dataS[i].AppNum;
                    ws.Cells[row, 12].Value = dataS[i].PermitIssued;
                    ws.Cells[row, 13].Value = dataS[i].ApplicationDisposalDate.HasValue ? dataS[i].ApplicationDisposalDate.Value.ToString("dd/MM/yyyy") : "";
                    ws.Cells[row, 14].Value = dataS[i].PermitNum;
                    ws.Cells[row, 15].Value = dataS[i].PspRef;
                    ws.Cells[row, 16].Value = dataS[i].EventPeriodFrom.HasValue ? dataS[i].EventPeriodFrom.Value.ToString("dd/MM/yyyy") : "";
                    ws.Cells[row, 17].Value = dataS[i].EventPeriodTo.HasValue ? dataS[i].EventPeriodTo.Value.ToString("dd/MM/yyyy") : "";
                    ws.Cells[row, 18].Value = dataS[i].SpecialRemark;
                    ws.Cells[row, 19].Value = dataS[i].PspNotReqInd == 1 ? indicator : "";
                    ws.Cells[row, 20].Value = dataS[i].AppWithdrawnInd == 1 ? indicator : "";
                    ws.Cells[row, 21].Value = dataS[i].AppRejectInd == 1 ? indicator : "";
                    ws.Cells[row, 22].Value = dataS[i].CloseMergeInd == 1 ? indicator : "";
                    ws.Cells[row, 23].Value = dataS[i].CloseOtherInd == 1 ? indicator : "";
                    ws.Cells[row, 24].Value = dataS[i].AllCheckedInd == 1 ? indicator : "";
                    ws.Cells[row, 25].Value = dataS[i].WithholdingListIndicator ? indicator : "";
                    ws.Cells[row, 26].Value = dataS[i].NetProceed;
                }

                ws = package.Workbook.Worksheets[2];
                if (dataM.Count > 0)
                {
                    int fromRow = 3;
                    int fromCol = 1;
                    int toRow = 18;
                    int toCol = 21;
                    int interval = 3;

                    int curRow = fromRow;
                    int curYr = -1;
                    int reject = 0;
                    int note = 0;

                    ws.Cells[1, 1].Value = ws.Cells[1, 1].Text.Replace("[DisasterName]", disasterName);

                    for (int i = 1; i <= toYear - fromYear; i++)
                    {
                        ws.InsertRow(fromRow + i * (toRow - fromRow + 1 + interval), toRow - fromRow + interval + 1);
                        ws.Cells[fromRow, fromCol, toRow, toCol].Copy(ws.Cells[fromRow + i * (toRow - fromRow + 1 + interval), fromCol, toRow + i * (toRow - fromRow + 1 + interval), toCol]);
                    }

                    for (int i = 0; i < dataM.Count; i++)
                    {
                        if (curYr != dataM[i].PspYear)
                        {
                            curYr = dataM[i].PspYear;
                            curRow = fromRow + (curYr - fromYear) * (toRow - fromRow + interval + 1) + 1;

                            ws.Cells[curRow - 1, 6].Value = ws.Cells[curRow - 1, 6].Text.FormatWith(dataM[i].PspYear);
                            ws.Cells[curRow, 1].Value = ws.Cells[curRow, 1].Text.FormatWith(dataM[i].PspYear - 1);
                            ws.Cells[curRow + 12, 1].Value = ws.Cells[curRow + 12, 1].Text.FormatWith(dataM[i].PspYear + 1);
                            ws.Cells[curRow + 13, 1].Value = ws.Cells[curRow + 13, 1].Text.FormatWith(dataM[i].PspYear);

                            if (reject > 0)
                            {
                                note++;

                                ws.Cells[curRow - 4, 4].IsRichText = true;
                                ws.Cells[curRow - 4, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                ExcelRichTextCollection rtfCollection = ws.Cells[curRow - 4, 4].RichText;
                                ExcelRichText ert = rtfCollection.Add("Notes {0}".FormatWith(note));
                                ert.Color = ColorFromRgb("00800000");
                                ert.Italic = true;
                                ert.Bold = true;
                            }

                            curRow += 1;
                            reject = 0;
                        }

                        reject += dataM[i].PspRejected;

                        ws.Cells[curRow + dataM[i].Level, 1].Formula = "DATE({0},{1},1)".FormatWith(dataM[i].PspYear, dataM[i].Level + 1);

                        ws.Cells[curRow + dataM[i].Level, 2].Value = dataM[i].PspReceived;
                        ws.Cells[curRow + dataM[i].Level, 3].Value = dataM[i].PspNotRequired;
                        ws.Cells[curRow + dataM[i].Level, 4].Value = dataM[i].PspRejected;

                        ws.Cells[curRow + dataM[i].Level, 5].Value = dataM[i].PspRevoked;

                        ws.Cells[curRow + dataM[i].Level, 6].Value = dataM[i].EventCancelled;
                        ws.Cells[curRow + dataM[i].Level, 8].Value = dataM[i].AppWithdrawn;
                        ws.Cells[curRow + dataM[i].Level, 9].Value = dataM[i].CaseClose;
                        ws.Cells[curRow + dataM[i].Level, 10].Value = dataM[i].CaseCloseOthers;
                        ws.Cells[curRow + dataM[i].Level, 11].Value = dataM[i].PspApproved;
                        ws.Cells[curRow + dataM[i].Level, 13].Value = dataM[i].PspSubvented;
                        ws.Cells[curRow + dataM[i].Level, 14].Value = dataM[i].NoOfEvent;
                        ws.Cells[curRow + dataM[i].Level, 15].Value = dataM[i].UnderProcess;
                        ws.Cells[curRow + dataM[i].Level, 16].Value = dataM[i].GrossProceed;
                        ws.Cells[curRow + dataM[i].Level, 17].Value = dataM[i].NetProceed;
                        ws.Cells[curRow + dataM[i].Level, 18].Value = dataM[i].PoliceCase;
                        ws.Cells[curRow + dataM[i].Level, 19].Value = dataM[i].NFA;
                        ws.Cells[curRow + dataM[i].Level, 20].Value = dataM[i].Verbal;
                        ws.Cells[curRow + dataM[i].Level, 21].Value = dataM[i].Convicted;
                    }

                    curRow += 14;

                    if (reject > 0)
                    {
                        note++;
                        ws.Cells[curRow, 4].IsRichText = true;
                        ws.Cells[curRow, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        ExcelRichTextCollection rtfCollection = ws.Cells[curRow, 4].RichText;
                        ExcelRichText ert = rtfCollection.Add("Notes {0}".FormatWith(note));
                        ert.Color = ColorFromRgb("00800000");
                        ert.Size = 10;
                        ert.Italic = true;
                        ert.Bold = true;
                    }

                    curRow += interval;
                    if (note > 1)
                        ws.Cells[curRow, fromCol, curRow, toCol].Copy(ws.Cells[curRow + 1, fromCol, curRow + note, toCol]);

                    for (int i = 1; i <= note; i++)
                    {
                        //ws.Cells[curRow, 1].IsRichText = true;
                        //ExcelRichTextCollection rtfCollection = ws.Cells[curRow, 1].RichText;
                        //ExcelRichText ert = rtfCollection.Add("Notes {0}".FormatWith(i));
                        //ert.Color = ColorFromRgb("00800000");
                        //ert.Italic = true;

                        ws.Cells[curRow, 1].Value = "Notes {0}".FormatWith(i);

                        curRow++;
                    }
                }
                package.Save();
            }

            return resultStream;
        }

        #endregion R6

        #region R7

        public System.IO.MemoryStream GenerateR7Excel(string templatePath, int? yearFrom, int? yearTo)
        {
            IList<R7Dto> data = this._reportRepository.GetR7Data(yearFrom, yearTo);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(DateFromTo(yearFrom, yearTo));

                ws.Cells["A9"].Value = ws.Cells["A9"].Text.FormatWith(DateTime.Now.ToString("dd/MM/yyyy"));

                ws.Cells[9, 1, 9, Math.Max(6, data.Count + 2)].Merge = true;

                int startCol = 3;
                int curCol = startCol;

                for (int i = startCol + 1; i < startCol + data.Count; i++)
                {
                    ws.Cells[10, startCol, 36, startCol].Copy(ws.Cells[10, i, 36, i]);
                    ws.Column(i).Width = ws.Column(startCol).Width;
                }

                for (int i = 0; i < data.Count; i++, curCol++)
                {
                    var disaster = data[i];

                    ws.Cells[10, curCol].IsRichText = true;
                    ExcelRichTextCollection rtfCollection = ws.Cells[10, curCol].RichText;
                    ExcelRichText ert;

                    if (disaster.DisasterMasterId != 10)
                        ert = rtfCollection.Add("{0} {1}{2}".FormatWith(data[i].DisasterDate.HasValue ? disaster.DisasterDate.Value.Year.ToString() : "", disaster.DisasterName, Environment.NewLine));
                    else
                    {
                        ert = rtfCollection.Add("{0} {1} ".FormatWith(data[i].DisasterDate.HasValue ? disaster.DisasterDate.Value.Year.ToString() : "", disaster.DisasterName));
                        ert = rtfCollection.Add("{0}{1}".FormatWith("1", Environment.NewLine));
                        ert.VerticalAlign = ExcelVerticalAlignmentFont.Superscript;
                    }

                    ert = rtfCollection.Add("{0}".FormatWith(disaster.ChiDisasterName));
                    ert.FontName = "DFKai-SB";

                    ws.Cells[11, curCol].Value = disaster.DisasterDate.HasValue ? disaster.DisasterDate.Value.ToString("dd/MM/yyyy") : "";
                    ws.Cells[12, curCol].Value = disaster.ProcessPeriod;
                    ws.Cells[14, curCol].Value = disaster.OrgSect88Ind;
                    ws.Cells[15, curCol].Value = disaster.OrgNonSect88Ind;
                    ws.Cells[17, curCol].Value = disaster.PspSect88Ind;
                    ws.Cells[18, curCol].Value = disaster.PspNonSect88Ind;
                    ws.Cells[20, curCol].Value = disaster.PermitSect88Issued;
                    ws.Cells[21, curCol].Value = disaster.PermitNonSect88Issued;
                    ws.Cells[23, curCol].Value = disaster.EventCount;
                    ws.Cells[24, curCol].Value = disaster.NetProceed;
                    ws.Cells[25, curCol].Value = disaster.AccRequiredCount;
                    ws.Cells[26, curCol].Value = disaster.AllCheckedInd;
                    ws.Cells[27, curCol].Value = disaster.WithholdingListIndicator;

                    //ws.Cells[28, curCol].Value = disaster.ComplaintSect88Count;
                    //ws.Cells[29, curCol].Value = disaster.ComplaintNonSect88Count;
                    ws.Cells[28, curCol].Value = disaster.Cond8Sect88Count;
                    ws.Cells[29, curCol].Value = disaster.Cond8NonSect88Count;

                    ws.Cells[31, curCol].Value = disaster.AllDocOsSect88Count;
                    ws.Cells[32, curCol].Value = disaster.AllDocOsNonSect88Count;
                    ws.Cells[34, curCol].Value = disaster.AcProblemSect88Count;
                    ws.Cells[35, curCol].Value = disaster.AcProblemNonSect88Count;

                    if (disaster.DisasterMasterId == 10)
                    {
                        ws.Cells[38, 1].Value = "Remark:";
                        ws.Cells[39, 1].Value = "1. The Net Proceeds of PSPs for \"2010 Gansu Mudslide\" should be adjusted downward to $0.3M, considering part of the proceeds (i.e. $165,108) from PSP No. 2010/324/1 were assigned for relief for victims of flooding in Pakistan.";
                    }

                    if (i < data.Count - 1)
                        ws.Cells[10, curCol, 36, curCol].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                }
                //ws.Cells[curRow, 4].IsRichText = true;
                //ws.Cells[curRow, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                //ExcelRichTextCollection rtfCollection = ws.Cells[curRow, 4].RichText;
                //ExcelRichText ert = rtfCollection.Add("Notes {0}".FormatWith(note));
                //ert.Color = ColorFromRgb("00800000");
                //ert.Size = 10;
                //ert.Italic = true;
                //ert.Bold = true;

                package.Save();
            }

            return resultStream;
        }

        #endregion R7

        #region R8

        public System.IO.MemoryStream GenerateR8Excel(string templatePath, DateTime? datefrom, DateTime? dateto)
        {
            IList<R8Dto> data = this._reportRepository.GetR8Report(datefrom, dateto);
            IList<Lookup> followupLetterType = this._lookupService.GetAllLookupListByType(LookupType.FollowUpLetterType);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(DateFromTo(datefrom, dateto));

                ws.Cells[10, 1, 10, 3 + followupLetterType.Count].Merge = true;

                if (followupLetterType.Count > 0)
                {
                    for (int i = 0; i < followupLetterType.Count; i++)
                    {
                        ws.Cells["A11:A12"].Copy(ws.Cells[11, 4 + i, 12, 4 + i]);
                        ws.Cells[11, 4 + i].Value = followupLetterType[i].EngDescription;
                        ws.Column(4 + i).Width = PixeltoWidth(96);
                    }
                }

                if (data.Count > 0)
                {
                    if (data.Select(x => x.ComplaintDate).Distinct().Count() > 1)
                        ws.InsertRow(12, data.Select(x => x.ComplaintDate).Distinct().Count() - 1, 12);

                    int intRow = 11;
                    string complaintDate = "";

                    for (int i = 0; i < data.Count; i++)
                    {
                        if (data[i].ComplaintDate != complaintDate)
                        {
                            intRow++;
                            complaintDate = data[i].ComplaintDate;

                            ws.Cells[intRow, 1].Value = complaintDate;
                            ws.Cells[intRow, 2].Value = data[i].ComplaintCnt;
                            ws.Cells[intRow, 3].Value = data[i].OrgCnt;
                        }

                        ws.Cells[intRow, 3 + data[i].DisplayOrder].Value = data[i].Cnt;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R8

        #region R9

        public System.IO.MemoryStream GenerateR9Excel(string templatePath, DateTime? datefrom, DateTime? dateto)
        {
            IList<R9Dto> data = this._reportRepository.GetR9Report(datefrom, dateto);
            IList<Lookup> followupLetterType = this._lookupService.GetAllLookupListByType(LookupType.FollowUpLetterType);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(DateFromTo(datefrom, dateto));

                ws.Cells[10, 1, 10, 4 + followupLetterType.Count].Merge = true;

                if (followupLetterType.Count > 0)
                {
                    for (int i = 0; i < followupLetterType.Count; i++)
                    {
                        ws.Cells["A11:A12"].Copy(ws.Cells[11, 5 + i, 12, 5 + i]);
                        ws.Cells[11, 5 + i].Value = followupLetterType[i].EngDescription;
                        ws.Column(5 + i).Width = PixeltoWidth(96);
                    }
                }

                if (data.Count > 0)
                {
                    if (data.Select(x => new { x.OrgRef, x.EngOrgName }).Distinct().Count() > 1)
                        ws.InsertRow(12, data.Select(x => new { x.OrgRef, x.EngOrgName }).Distinct().Count() - 1, 12);

                    int intRow = 11;
                    string orgRef = "";
                    string engOrgName = null;

                    for (int i = 0; i < data.Count; i++)
                    {
                        if (data[i].OrgRef != orgRef || data[i].EngOrgName != engOrgName)
                        {
                            intRow++;
                            orgRef = data[i].OrgRef;
                            engOrgName = data[i].EngOrgName;

                            ws.Cells[intRow, 1].Value = orgRef;
                            ws.Cells[intRow, 2].Value = data[i].EngOrgName;
                            ws.Cells[intRow, 3].Value = data[i].ChiOrgName;
                            ws.Cells[intRow, 4].Value = data[i].ComplaintCnt;
                        }

                        ws.Cells[intRow, 4 + data[i].DisplayOrder].Value = data[i].Cnt;
                    }
                }

                ws.Column(2).AutoFit();
                ws.Column(3).AutoFit();

                package.Save();
            }

            return resultStream;
        }

        #endregion R9

        #region R10

        public System.IO.MemoryStream GenerateR10Excel(string templatePath, DateTime? datefrom, DateTime? dateto)
        {
            IList<R10Dto> data = this._reportRepository.GetR10Report(datefrom, dateto);
            IList<Lookup> nonComplianceNature = this._lookupService.GetAllLookupListByType(LookupType.ComplaintNonComplianceNature);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(DateFromTo(datefrom, dateto));

                ws.Cells[10, 1, 10, 3 + nonComplianceNature.Count].Merge = true;

                if (nonComplianceNature.Count > 0)
                {
                    for (int i = 0; i < nonComplianceNature.Count; i++)
                    {
                        ws.Cells["A11:A12"].Copy(ws.Cells[11, 4 + i, 12, 4 + i]);
                        ws.Cells[11, 4 + i].Value = nonComplianceNature[i].EngDescription;
                        ws.Column(4 + i).Width = PixeltoWidth(96);
                    }
                }

                if (data.Count > 0)
                {
                    if (data.Select(x => x.ComplaintDate).Distinct().Count() > 1)
                        ws.InsertRow(12, data.Select(x => x.ComplaintDate).Distinct().Count() - 1, 12);

                    int intRow = 11;
                    string complaintDate = "";

                    for (int i = 0; i < data.Count; i++)
                    {
                        if (data[i].ComplaintDate != complaintDate)
                        {
                            intRow++;
                            complaintDate = data[i].ComplaintDate;

                            ws.Cells[intRow, 1].Value = complaintDate;
                            ws.Cells[intRow, 2].Value = data[i].ComplaintCnt;
                            ws.Cells[intRow, 3].Value = data[i].OrgCnt;
                        }

                        ws.Cells[intRow, 3 + data[i].DisplayOrder].Value = data[i].Cnt;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        //private void FillAddr(int fromCell, IList<R10Dto> data, ExcelWorksheet ws)
        //{
        //    string cellyear = "B{0}".FormatWith(fromCell);
        //    ws.Cells[cellyear].Value = data[0].ComplaintDate.Value.Year;
        //    ws.Cells[cellyear].Style.Font.Bold = true;
        //    for (int i = 1; i <= data.Count; i++)
        //    {
        //        ws.Cells["F{0}:G{1}".FormatWith(fromCell + i, fromCell + i)].Merge = true;
        //        ws.Cells["A{0}".FormatWith(fromCell + i)].Value = i;
        //        ws.Cells["B{0}".FormatWith(fromCell + i)].Value = data[i - 1].ComplaintDate;
        //        ws.Cells["C{0}".FormatWith(fromCell + i)].Value = data[i - 1].ComplaintSource;
        //        ws.Cells["D{0}".FormatWith(fromCell + i)].Value = data[i - 1].DcLcContent;
        //        ws.Cells["E{0}".FormatWith(fromCell + i)].Value = data[i - 1].EngOrgName;
        //        ws.Cells["F{0}".FormatWith(fromCell + i)].Value = data[i - 1].ComplaintEnclosureNum;
        //        ws.Cells["H{0}".FormatWith(fromCell + i)].Value = data[i - 1].ReportPoliceIndicator;
        //        ws.Cells["I{0}".FormatWith(fromCell + i)].Value = data[i - 1].FollowUpIndicator;
        //        ws.Cells["J{0}".FormatWith(fromCell + i)].Value = data[i - 1].ReplyToEnquirerIndicator;
        //        ws.Cells["K{0}".FormatWith(fromCell + i)].Value = data[i - 1].ActionFileEnclosureNum;
        //        ws.Cells["L{0}".FormatWith(fromCell + i)].Value = data[i - 1].EnquiryIndicator;
        //        ws.Cells["M{0}".FormatWith(fromCell + i)].Value = data[i - 1].ComplaintIndicator;
        //        ws.Cells["N{0}".FormatWith(fromCell + i)].Value = data[i - 1].OthersComplaintIndicator;
        //        ws.Cells["O{0}".FormatWith(fromCell + i)].Value = data[i - 1].OtherResultIndicator;
        //        ws.Cells["P{0}".FormatWith(fromCell + i)].Value = data[i - 1].ComplaintRemarks;
        //    }
        //    string cellRng = "A{0}:P{1}".FormatWith(fromCell + 1, (data.Count + fromCell).ToString());
        //    using (var rng = ws.Cells[cellRng])
        //    {
        //        rng.Style.Border.Left.Style = ExcelBorderStyle.Thin;
        //        rng.Style.Border.Top.Style = ExcelBorderStyle.Thin;
        //        rng.Style.Border.Right.Style = ExcelBorderStyle.Thin;
        //        rng.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
        //        rng.Style.WrapText = true;
        //    }
        //    var date = ws.Cells["B{0}:B{1}".FormatWith(fromCell + 1, data.Count + fromCell)].Style.Numberformat.Format = "dd/MM/yyyy";
        //}

        #endregion R10

        #region R11

        public System.IO.MemoryStream GenerateR11Excel(string templatePath, DateTime? datefrom, DateTime? dateto)
        {
            IList<R11Dto> data = this._reportRepository.GetR11Report(datefrom, dateto);
            IList<Lookup> followupLetterType = this._lookupService.GetAllLookupListByType(LookupType.ComplaintNonComplianceNature);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(DateFromTo(datefrom, dateto));

                ws.Cells[10, 1, 10, 4 + followupLetterType.Count].Merge = true;

                if (followupLetterType.Count > 0)
                {
                    for (int i = 0; i < followupLetterType.Count; i++)
                    {
                        ws.Cells["A11:A12"].Copy(ws.Cells[11, 5 + i, 12, 5 + i]);
                        ws.Cells[11, 5 + i].Value = followupLetterType[i].EngDescription;
                        ws.Column(5 + i).Width = PixeltoWidth(96);
                    }
                }

                if (data.Count > 0)
                {   
                    if (data.Select(x => new { x.OrgRef, x.EngOrgName }).Distinct().Count() > 1)
                        ws.InsertRow(12, data.Select(x => new { x.OrgRef, x.EngOrgName }).Distinct().Count() - 1, 12);

                    int intRow = 11;
                    string orgRef = "";
                    string engOrgName = null;

                    for (int i = 0; i < data.Count; i++)
                    {
                        if (data[i].OrgRef != orgRef || data[i].EngOrgName != engOrgName)
                        {
                            intRow++;
                            orgRef = data[i].OrgRef;
                            engOrgName = data[i].EngOrgName;

                            ws.Cells[intRow, 1].Value = orgRef;
                            ws.Cells[intRow, 2].Value = data[i].EngOrgName;
                            ws.Cells[intRow, 3].Value = data[i].ChiOrgName;
                            ws.Cells[intRow, 4].Value = data[i].ComplaintCnt;
                        }

                        ws.Cells[intRow, 4 + data[i].DisplayOrder].Value = data[i].Cnt;
                    }
                }

                ws.Column(2).AutoFit();
                ws.Column(3).AutoFit();

                package.Save();
            }

            return resultStream;
        }

        //private void FillR11Addr(int fromCell, IList<R11Dto> data, ExcelWorksheet ws)
        //{
        //    string cellyear = "B{0}".FormatWith(fromCell);
        //    ws.Cells[cellyear].Value = data[0].ComplaintDate.Value.Year;
        //    ws.Cells[cellyear].Style.Font.Bold = true;
        //    for (int i = 1; i <= data.Count; i++)
        //    {
        //        ws.Cells["F{0}:I{1}".FormatWith(fromCell + i, fromCell + i)].Merge = true;
        //        ws.Cells["A{0}".FormatWith(fromCell + i)].Value = i;
        //        ws.Cells["B{0}".FormatWith(fromCell + i)].Value = data[i - 1].ComplaintDate;
        //        ws.Cells["C{0}".FormatWith(fromCell + i)].Value = data[i - 1].ComplaintSource;
        //        ws.Cells["D{0}".FormatWith(fromCell + i)].Value = data[i - 1].DcLcContent;
        //        ws.Cells["E{0}".FormatWith(fromCell + i)].Value = data[i - 1].EngOrgName;
        //        ws.Cells["F{0}".FormatWith(fromCell + i)].Value = data[i - 1].ComplaintEnclosureNum;
        //        ws.Cells["J{0}".FormatWith(fromCell + i)].Value = data[i - 1].ReportPoliceIndicator;
        //        ws.Cells["K{0}".FormatWith(fromCell + i)].Value = data[i - 1].FollowUpIndicator;
        //        ws.Cells["L{0}".FormatWith(fromCell + i)].Value = data[i - 1].ReplyToEnquirerIndicator;
        //        ws.Cells["M{0}".FormatWith(fromCell + i)].Value = data[i - 1].ActionFileEnclosureNum;
        //        ws.Cells["N{0}".FormatWith(fromCell + i)].Value = data[i - 1].EnquiryIndicator;
        //        ws.Cells["O{0}".FormatWith(fromCell + i)].Value = data[i - 1].ComplaintIndicator;
        //        ws.Cells["P{0}".FormatWith(fromCell + i)].Value = data[i - 1].OthersComplaintIndicator;
        //        ws.Cells["Q{0}".FormatWith(fromCell + i)].Value = data[i - 1].OtherResultIndicator;
        //        ws.Cells["R{0}".FormatWith(fromCell + i)].Value = data[i - 1].ComplaintRemarks;
        //    }
        //    string cellRng = "A{0}:R{1}".FormatWith(fromCell + 1, (data.Count + fromCell).ToString());
        //    using (var rng = ws.Cells[cellRng])
        //    {
        //        rng.Style.Border.Left.Style = ExcelBorderStyle.Thin;
        //        rng.Style.Border.Top.Style = ExcelBorderStyle.Thin;
        //        rng.Style.Border.Right.Style = ExcelBorderStyle.Thin;
        //        rng.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
        //        rng.Style.WrapText = true;
        //    }
        //    var date = ws.Cells["B{0}:B{1}".FormatWith(fromCell + 1, data.Count + fromCell)].Style.Numberformat.Format = "dd-MM-yyyy";
        //}

        #endregion R11

        #region R12

        public System.IO.MemoryStream GenerateR12Excel(string templatePath, DateTime? datefrom, DateTime? dateto)
        {
            IList<R12Dto> data = this._reportRepository.GetR12Report(datefrom, dateto);
            IList<Lookup> complaintResult = this._lookupService.GetAllLookupListByType(LookupType.ComplaintResult);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(DateFromTo(datefrom, dateto));

                ws.Cells[10, 1, 10, 3 + complaintResult.Count].Merge = true;

                if (complaintResult.Count > 0)
                {
                    for (int i = 0; i < complaintResult.Count; i++)
                    {
                        ws.Cells["A11:A12"].Copy(ws.Cells[11, 4 + i, 12, 4 + i]);
                        ws.Cells[11, 4 + i].Value = complaintResult[i].EngDescription;
                        ws.Column(4 + i).Width = PixeltoWidth(96);
                    }
                }

                if (data.Count > 0)
                {
                    if (data.Select(x => x.ComplaintDate).Distinct().Count() > 1)
                        ws.InsertRow(12, data.Select(x => x.ComplaintDate).Distinct().Count() - 1, 12);

                    int intRow = 11;
                    string complaintDate = "";

                    for (int i = 0; i < data.Count; i++)
                    {
                        if (data[i].ComplaintDate != complaintDate)
                        {
                            intRow++;
                            complaintDate = data[i].ComplaintDate;

                            ws.Cells[intRow, 1].Value = complaintDate;
                            ws.Cells[intRow, 2].Value = data[i].ComplaintCnt;
                            ws.Cells[intRow, 3].Value = data[i].OrgCnt;
                        }

                        ws.Cells[intRow, 3 + data[i].DisplayOrder].Value = data[i].Cnt;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R12

        #region R13

        public System.IO.MemoryStream GenerateR13Excel(string templatePath, DateTime? datefrom, DateTime? dateto)
        {
            IList<R13Dto> data = this._reportRepository.GetR13Report(datefrom, dateto);
            IList<Lookup> complaintResult = this._lookupService.GetAllLookupListByType(LookupType.ComplaintResult);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(DateFromTo(datefrom, dateto));

                ws.Cells[10, 1, 10, 4 + complaintResult.Count].Merge = true;

                if (complaintResult.Count > 0)
                {
                    for (int i = 0; i < complaintResult.Count; i++)
                    {
                        ws.Cells["A11:A12"].Copy(ws.Cells[11, 5 + i, 12, 5 + i]);
                        ws.Cells[11, 5 + i].Value = complaintResult[i].EngDescription;
                        ws.Column(5 + i).Width = PixeltoWidth(96);
                    }
                }

                if (data.Count > 0)
                {
                    if (data.Select(x => new { x.OrgRef, x.EngOrgName }).Distinct().Count() > 1)
                        ws.InsertRow(12, data.Select(x => new { x.OrgRef, x.EngOrgName }).Distinct().Count() - 1, 12);

                    int intRow = 11;
                    string orgRef = "";
                    string engOrgName = null;

                    for (int i = 0; i < data.Count; i++)
                    {
                        if (data[i].OrgRef != orgRef || data[i].EngOrgName != engOrgName)
                        {
                            intRow++;
                            orgRef = data[i].OrgRef;
                            engOrgName = data[i].EngOrgName;

                            ws.Cells[intRow, 1].Value = orgRef;
                            ws.Cells[intRow, 2].Value = data[i].EngOrgName;
                            ws.Cells[intRow, 3].Value = data[i].ChiOrgName;
                            ws.Cells[intRow, 4].Value = data[i].ComplaintCnt;
                        }

                        ws.Cells[intRow, 4 + data[i].DisplayOrder].Value = data[i].Cnt;
                    }
                }

                ws.Column(2).AutoFit();
                ws.Column(3).AutoFit();

                package.Save();
            }

            return resultStream;
        }

        #endregion R13

        #region R14

        public System.IO.MemoryStream GenerateR14Excel(string templatePath, int? fromYear, int? toYear, string complaintSource)
        {
            IList<R14Dto> data = this._reportRepository.GetR14Report(fromYear, toYear, complaintSource);
            string source = this._lookupService.GetDescription(LookupType.ComplaintSource, complaintSource);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Name = source;

                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(DateFromTo(fromYear, toYear));
                ws.Cells["A9"].Value = ws.Cells["A9"].Text.FormatWith(source);
                ws.Cells["A11"].Value = ws.Cells["A11"].Text.FormatWith(source);

                int intRow = 15;
                string tick = "P";

                if (data.Count > 0)
                {
                    if (data.Count > 2)
                        ws.InsertRow(intRow, data.Count - 2, intRow);

                    for (int i = 0; i < data.Count; i++)
                    {
                        ws.Cells["A{0}".FormatWith(intRow + i)].Value = data[i].ComplaintDate;
                        ws.Cells["B{0}".FormatWith(intRow + i)].Value = data[i].ComplainantName;
                        ws.Cells["C{0}".FormatWith(intRow + i)].Value = data[i].DcLcContent;
                        ws.Cells["D{0}".FormatWith(intRow + i)].Value = data[i].ConcernOrgName;
                        ws.Cells["E{0}".FormatWith(intRow + i)].Value = data[i].ConcernChiOrgName;
                        ws.Cells["F{0}".FormatWith(intRow + i)].Value = data[i].ComplaintEnclosureNum;
                        ws.Cells["G{0}".FormatWith(intRow + i)].Value = data[i].ComplaintPartNum;
                        ws.Cells["H{0}".FormatWith(intRow + i)].Value = data[i].ReportPolice ? tick : "";
                        ws.Cells["I{0}".FormatWith(intRow + i)].Value = data[i].FollowUp ? tick : "";
                        ws.Cells["J{0}".FormatWith(intRow + i)].Value = data[i].OtherFollowUp ? tick : "";
                        ws.Cells["K{0}".FormatWith(intRow + i)].Value = data[i].ActionFileEnclosureNum;
                        ws.Cells["L{0}".FormatWith(intRow + i)].Value = data[i].ActionFilePartNum;

                        if (data[i].RecordTypeIndicator == "1")
                            ws.Cells["M{0}".FormatWith(intRow + i)].Value = tick;
                        else if (data[i].RecordTypeIndicator == "2")
                            ws.Cells["N{0}".FormatWith(intRow + i)].Value = tick;
                        else
                            ws.Cells["O{0}".FormatWith(intRow + i)].Value = tick;

                        ws.Cells["P{0}".FormatWith(intRow + i)].Value = data[i].ComplaintResultRemark;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R14

        #region R15

        public System.IO.MemoryStream GenerateR15Excel(string templatePath)
        {
            IList<R15Dto> data = this._reportRepository.GetR15Report();

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();

                int intRow = 15;

                if (data.Count > 0)
                {
                    if (data.Count > 2)
                        ws.InsertRow(intRow, data.Count - 2, intRow);

                    for (int i = 0; i < data.Count; i++)
                    {
                        ws.Cells["A{0}".FormatWith(intRow + i)].Value = i + 1;
                        ws.Cells["B{0}".FormatWith(intRow + i)].Value = data[i].InformedByPolice == 0 ? "P" : "";
                        ws.Cells["C{0}".FormatWith(intRow + i)].Value = data[i].InformedByPolice == 0 ? "" : "P";
                        ws.Cells["D{0}".FormatWith(intRow + i)].Value = data[i].ReferralDate;
                        ws.Cells["E{0}".FormatWith(intRow + i)].Value = data[i].MemoDate;
                        ws.Cells["F{0}".FormatWith(intRow + i)].Value = data[i].ConcernOrgName;
                        ws.Cells["G{0}".FormatWith(intRow + i)].Value = data[i].ConcernChiOrgName;
                        ws.Cells["H{0}".FormatWith(intRow + i)].Value = data[i].CorrespondenceEnclosureNum;
                        ws.Cells["I{0}".FormatWith(intRow + i)].Value = data[i].CorrespondencePartNum;
                        ws.Cells["J{0}".FormatWith(intRow + i)].Value = data[i].PoliceRefNum;
                        ws.Cells["K{0}".FormatWith(intRow + i)].Value = data[i].CaseNature;
                        ws.Cells["L{0}".FormatWith(intRow + i)].Value = data[i].ResultDetail;
                        ws.Cells["M{0}".FormatWith(intRow + i)].Value = data[i].EnclosureNum;
                        ws.Cells["N{0}".FormatWith(intRow + i)].Value = data[i].PartNum;
                        ws.Cells["O{0}".FormatWith(intRow + i)].Value = data[i].Remark;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R15

        #region R16

        public System.IO.MemoryStream GenerateR16Excel(string templatePath, DateTime? criteriaDate)
        {
            IList<R16PspDto> dataPsp = this._reportRepository.GetR16PspReport(criteriaDate);
            IList<R16FdDto> dataFd = this._reportRepository.GetR16FdReport(criteriaDate);
            IList<R16ComplaintDto> dataComplaint = this._reportRepository.GetR16ComplaintReport(criteriaDate);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                int intStartRow = 12;
                int row = intStartRow;
                int orgCnt = 0;
                int orgId = -1;

                //PSP
                var ws1 = package.Workbook.Worksheets[1];
                ws1.Cells["A5"].Value = GeneratedBy();
                ws1.Cells["A8"].Value = ws1.Cells["A8"].Text.FormatWith(criteriaDate);
                ws1.Cells["B10"].Value = ws1.Cells["B10"].Text.FormatWith(DateTime.Now);

                if (dataPsp.Count > 0)
                {
                    if (dataPsp.Count > 1)
                    {
                        ws1.InsertRow(intStartRow, dataPsp.Count - 1, intStartRow);

                        string cellRng = "B{0}:O{1}".FormatWith(intStartRow, (intStartRow + dataPsp.Count - 2));
                        ws1.Cells[cellRng].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    }

                    for (int i = 0; i < dataPsp.Count; i++)
                    {
                        if (orgId != dataPsp[i].OrgId)
                        {
                            orgId = dataPsp[i].OrgId;
                            orgCnt++;
                        }

                        ws1.Cells["B{0}".FormatWith(row)].Value = orgCnt;
                        ws1.Cells["D{0}".FormatWith(row)].Value = dataPsp[i].EngOrgName;
                        ws1.Cells["F{0}".FormatWith(row)].Value = dataPsp[i].EventEndDate;
                        ws1.Cells["G{0}".FormatWith(row)].Value = dataPsp[i].PermitNum;
                        ws1.Cells["H{0}".FormatWith(row)].Value = dataPsp[i].FileRef;
                        ws1.Cells["I{0}".FormatWith(row)].Value = dataPsp[i].WithholdingBeginDate;
                        ws1.Cells["J{0}".FormatWith(row)].Value = dataPsp[i].WithholdingEndDate;
                        ws1.Cells["K{0}".FormatWith(row)].Value = dataPsp[i].AuditedReportIndicator;
                        ws1.Cells["L{0}".FormatWith(row)].Value = dataPsp[i].OfficialReceiptIndicator;
                        ws1.Cells["M{0}".FormatWith(row)].Value = dataPsp[i].NewspaperCuttingIndicator;
                        ws1.Cells["N{0}".FormatWith(row)].Value = dataPsp[i].QualityOpinionDetail;
                        ws1.Cells["O{0}".FormatWith(row)].Value = dataPsp[i].DocRemark;

                        if (dataPsp[i].AuditedReportIndicator != "P" && dataPsp[i].AuditedReportIndicator != "O")
                        {
                            ws1.Cells["K{0}".FormatWith(row)].Style.Font.Name = "Times New Roman";
                        }

                        if (dataPsp[i].OfficialReceiptIndicator != "P" && dataPsp[i].OfficialReceiptIndicator != "O")
                        {
                            ws1.Cells["L{0}".FormatWith(row)].Style.Font.Name = "Times New Roman";
                        }

                        if (dataPsp[i].NewspaperCuttingIndicator != "P" && dataPsp[i].NewspaperCuttingIndicator != "O")
                        {
                            ws1.Cells["M{0}".FormatWith(row)].Style.Font.Name = "Times New Roman";
                        }
                        row++;
                    }
                }

                //Flag day
                intStartRow = 3;
                row = intStartRow;
                orgId = -1;
                orgCnt = 0;
                var ws2 = package.Workbook.Worksheets[2];
                ws2.Cells["A1"].Value = ws2.Cells["A1"].Text.FormatWith(DateTime.Now);
                if (dataFd.Count > 0)
                {
                    if (dataFd.Count > 1)
                    {
                        ws2.InsertRow(intStartRow, dataFd.Count - 1, intStartRow);

                        string cellRng = "A{0}:K{1}".FormatWith(intStartRow, intStartRow + dataFd.Count - 2);
                        ws2.Cells[cellRng].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    }

                    for (int i = 0; i < dataFd.Count; i++)
                    {
                        if (orgId != dataFd[i].OrgId)
                        {
                            orgId = dataFd[i].OrgId;
                            orgCnt++;
                        }

                        ws2.Cells["A{0}".FormatWith(i + intStartRow)].Value = "FD{0}".FormatWith(orgCnt);
                        ws2.Cells["B{0}".FormatWith(i + intStartRow)].Value = dataFd[i].EngOrgName;
                        ws2.Cells["C{0}".FormatWith(i + intStartRow)].Value = "{0:dd/MM/yyyy}{1}{2}".FormatWith(dataFd[i].FlagDay, Environment.NewLine, dataFd[i].TWR);
                        ws2.Cells["D{0}".FormatWith(i + intStartRow)].Value = dataFd[i].PermitNum;
                        ws2.Cells["E{0}".FormatWith(i + intStartRow)].Value = dataFd[i].FileRef;
                        ws2.Cells["F{0}".FormatWith(i + intStartRow)].Value = dataFd[i].WithholdingBeginDate;
                        ws2.Cells["G{0}".FormatWith(i + intStartRow)].Value = dataFd[i].WithholdingEndDate;
                        ws2.Cells["H{0}".FormatWith(i + intStartRow)].Value = dataFd[i].ReviewReportIndicator;
                        ws2.Cells["I{0}".FormatWith(i + intStartRow)].Value = dataFd[i].NewspaperIndicator;
                        ws2.Cells["J{0}".FormatWith(i + intStartRow)].Value = dataFd[i].AfsReceiveIndicator;
                        ws2.Cells["K{0}".FormatWith(i + intStartRow)].Value = dataFd[i].DocReceiveRemark;

                        if (dataFd[i].AfsReceiveIndicator != "P" && dataFd[i].AfsReceiveIndicator != "O")
                            ws2.Cells["J{0}".FormatWith(row)].Style.Font.Name = "Times New Roman";
                    }
                }

                //Complaint day
                intStartRow = 3;
                row = intStartRow;
                orgId = -1;
                orgCnt = 0;
                var ws3 = package.Workbook.Worksheets[3];
                ws3.Cells["A1"].Value = ws3.Cells["A1"].Text.FormatWith(DateTime.Now);
                if (dataComplaint.Count > 0)
                {
                    if (dataComplaint.Count > 1)
                    {
                        ws3.InsertRow(intStartRow, dataComplaint.Count - 1, intStartRow);

                        string cellRng = "A{0}:K{1}".FormatWith(intStartRow, intStartRow + dataComplaint.Count - 2);
                        ws3.Cells[cellRng].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    }

                    for (int i = 0; i < dataComplaint.Count; i++)
                    {
                        if (orgId != dataComplaint[i].OrgId)
                        {
                            orgId = dataComplaint[i].OrgId;
                            orgCnt++;
                        }

                        ws3.Cells["A{0}".FormatWith(i + intStartRow)].Value = orgCnt;
                        ws3.Cells["B{0}".FormatWith(i + intStartRow)].Value = dataComplaint[i].EngOrgName;
                        ws3.Cells["C{0}".FormatWith(i + intStartRow)].Value = dataComplaint[i].ComplaintDate;
                        ws3.Cells["D{0}".FormatWith(i + intStartRow)].Value = dataComplaint[i].ComplaintSource;
                        ws3.Cells["E{0}".FormatWith(i + intStartRow)].Value = dataComplaint[i].ActivityConcern;
                        ws3.Cells["F{0}".FormatWith(i + intStartRow)].Value = dataComplaint[i].PermitNum;
                        ws3.Cells["G{0}".FormatWith(i + intStartRow)].Value = dataComplaint[i].ComplaintRef;
                        ws3.Cells["H{0}".FormatWith(i + intStartRow)].Value = dataComplaint[i].WithholdingBeginDate;
                        ws3.Cells["I{0}".FormatWith(i + intStartRow)].Value = dataComplaint[i].WithholdingEndDate;
                        ws3.Cells["J{0}".FormatWith(i + intStartRow)].Value = dataComplaint[i].WithholdingRemark;
                        ws3.Cells["K{0}".FormatWith(i + intStartRow)].Value = dataComplaint[i].OtherWithholdingRemark;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R16

        #region R17

        public System.IO.MemoryStream GenerateR17Word(int complaintMasterId, string templatePath)
        {
            IList<R17MainDto> main = this._reportRepository.GetR17MainReport(complaintMasterId);
            IList<R17ResultDto> result = this._reportRepository.GetR17ResultReport(complaintMasterId);
            IList<R17TelDto> tel = this._reportRepository.GetR17TelReport(complaintMasterId);
            IList<R17FollwUpPoliceDto> followUpPolice = this._reportRepository.GetR17FollowUpPoliceReport(complaintMasterId);
            IList<R17FollowUpDto> followUp = this._reportRepository.GetR17FollowUpReport(complaintMasterId);
            IList<R17FollowUpOtherDto> followUpOther = this._reportRepository.GetR17FollowUpOtherReport(complaintMasterId);
            IList<R17FollowUpLetterDto> followUpLetter = this._reportRepository.GetR17FollowUpLetterReport(complaintMasterId);
            IList<R17PoliceCaseDto> policeCases = this._reportRepository.GetR17PoliceCaseReport(complaintMasterId);
            IList<R17FromOthersDto> fromOthers = this._reportRepository.GetR17FromOthersReport(complaintMasterId);

            MemoryStream resultStream = new MemoryStream();

            using (DocX document = DocX.Load(templatePath))
            {
                Table docResult = document.Tables[1];
                Table docTel = document.Tables[3];
                Table docFollowUp = document.Tables[4];
                Table docFollowUpPolice = document.Tables[5];
                Table docFollowUpOther = document.Tables[6];
                Table docFollwUpLetter = document.Tables[7];
                Table docPoliceCases = document.Tables[8];
                Table docFromOthers = document.Tables[9];

                List<Row> telTable = new List<Row>();
                List<Row> followUpPoliceTable = new List<Row>();
                List<Row> followUpTable = new List<Row>();
                List<Row> followUpOtherTable = new List<Row>();
                List<Row> policeCasesTable = new List<Row>();
                List<Row> fromOthersTable = new List<Row>();

                for (int i = 1; i < docTel.RowCount; i++)
                    telTable.Add(docTel.Rows[i]);

                for (int i = 1; i < docFollowUpPolice.RowCount; i++)
                    followUpPoliceTable.Add(docFollowUpPolice.Rows[i]);

                for (int i = 1; i < docFollowUp.RowCount; i++)
                    followUpTable.Add(docFollowUp.Rows[i]);

                for (int i = 1; i < docFollowUpOther.RowCount; i++)
                    followUpOtherTable.Add(docFollowUpOther.Rows[i]);

                for (int i = 1; i < docPoliceCases.RowCount; i++)
                    policeCasesTable.Add(docPoliceCases.Rows[i]);

                for (int i = 1; i < docFromOthers.RowCount; i++)
                    fromOthersTable.Add(docFromOthers.Rows[i]);

                //Main Data
                for (int i = 0; i < main.Count; i++)
                {
                    foreach (var property in typeof(R17MainDto).GetProperties())
                    {
                        if (property.GetValue(main[i]) != null)
                        {
                            if (property.Name.Contains("Date"))
                            {
                                DateTime date = (DateTime)property.GetValue(main[i]);
                                document.ReplaceText("%{0}%".FormatWith(property.Name), date.ToString("dd/MM/yyyy"));
                            }
                            else
                                document.ReplaceText("%{0}%".FormatWith(property.Name), property.GetValue(main[i]).ToString());
                        }
                        else
                            document.ReplaceText("%{0}%".FormatWith(property.Name), "");
                    }
                }

                int currRow = 0;
                PropertyInfo[] properties = typeof(R17ResultDto).GetProperties();

                //Result
                if (result.Count > 0)
                {
                    currRow = 1;
                    for (int i = 0; i < result.Count() - 1; i++)
                    {
                        docResult.InsertRow(docResult.Rows[currRow]);
                    }

                    for (int i = 0; i < result.Count(); i++)
                    {
                        string value = string.Empty;
                        //Put the values from followup to dictionary
                        foreach (var property in properties)
                        {
                            if (property.GetValue(result[i]) != null)
                            {
                                if (property.Name.Contains("Date"))
                                {
                                    DateTime date = (DateTime)property.GetValue(result[i]);
                                    value = date.ToString("dd/MM/yyyy");
                                }
                                else
                                    value = property.GetValue(result[i]).ToString();
                            }
                            else
                                value = string.Empty;

                            docResult.Rows[currRow].ReplaceText("%{0}%".FormatWith(property.Name), value);
                        }
                        currRow++;
                    }
                }
                else
                {
                    foreach (var property in properties)
                    {
                        document.ReplaceText("%{0}%".FormatWith(property.Name), "");
                    }
                }

                R17FillTable(typeof(R17TelDto).GetProperties(), tel, docTel, telTable);
                R17FillTable(typeof(R17FollowUpDto).GetProperties(), followUp, docFollowUp, followUpTable);
                R17FillTable(typeof(R17FollwUpPoliceDto).GetProperties(), followUpPolice, docFollowUpPolice, followUpPoliceTable);
                R17FillTable(typeof(R17FollowUpOtherDto).GetProperties(), followUpOther, docFollowUpOther, followUpOtherTable);

                //Followup Letter
                if (followUpLetter.Count > 0)
                {
                    foreach (var letter in followUpLetter)
                    {
                        if (letter.FollowUpLetterType == "02")
                        {
                            docFollwUpLetter.Rows[1].ReplaceText("%RCount%", letter.Cnt.ToString());
                            docFollwUpLetter.Rows[1].ReplaceText("%RDate%", letter.IssueDates);
                        }
                        else if (letter.FollowUpLetterType == "03")
                        {
                            docFollwUpLetter.Rows[2].ReplaceText("%ACount%", letter.Cnt.ToString());
                            docFollwUpLetter.Rows[2].ReplaceText("%ADate%", letter.IssueDates);
                        }
                        else if (letter.FollowUpLetterType == "04")
                        {
                            docFollwUpLetter.Rows[3].ReplaceText("%WCount%", letter.Cnt.ToString());
                            docFollwUpLetter.Rows[3].ReplaceText("%WDate%", letter.IssueDates);
                        }
                    }
                }

                //TODO: Police Investigation
                R17FillTable(typeof(R17PoliceCaseDto).GetProperties(), policeCases, docPoliceCases, policeCasesTable);

                //Enquiry from Other Dept/Authorizes
                R17FillTable(typeof(R17FromOthersDto).GetProperties(), fromOthers, docFromOthers, fromOthersTable);

                document.SaveAs(resultStream);
            }

            return resultStream;
        }

        private void R17FillTable<T>(PropertyInfo[] properties, IList<T> data, Table table, List<Row> rows)
        {
            int currRow = 1;
            Dictionary<string, string> values = new Dictionary<string, string>();

            if (data.Count > 0)
            {
                for (int i = 0; i < data.Count() - 1; i++)
                {
                    for (int j = 0; j < rows.Count; j++)
                    {
                        table.InsertRow(rows[j]);
                    }
                }

                for (int i = 0; i < data.Count(); i++)
                {
                    values.Clear();
                    //Put the values from followup to dictionary
                    foreach (var property in properties)
                    {
                        if (property.GetValue(data[i]) != null)
                        {
                            if (property.Name.Contains("Date"))
                            {
                                DateTime date = (DateTime)property.GetValue(data[i]);
                                values.Add(property.Name, date.ToString("dd/MM/yyyy"));
                            }
                            else
                                values.Add(property.Name, property.GetValue(data[i]).ToString());
                        }
                        else
                            values.Add(property.Name, "");
                    }

                    for (int j = 0; j < rows.Count; j++)
                    {
                        foreach (var value in values)
                        {
                            if (value.Value.IsNotNullOrEmpty())
                            {
                                table.Rows[currRow].ReplaceText("%{0}%".FormatWith(value.Key), value.Value);
                            }
                            else
                            {
                                table.Rows[currRow].ReplaceText("%{0}%".FormatWith(value.Key), "%empty%");
                            }
                        }
                        currRow++;
                    }
                }

                var remove = table.Paragraphs.Where(x => x.Text == "\t%empty%" || x.Text == "\t%empty%\t");
                foreach (var para in remove)
                {
                    para.Remove(false);
                }
            }
            else
            {
                table.Remove();
            }
        }

        #endregion R17

        #region R18

        public System.IO.MemoryStream GenerateR18Excel(string templatePath)
        {
            IList<R18Dto> data = this._reportRepository.GetR18Report();

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                int intStartRow = 14;
                int intRow = intStartRow;

                CultureInfo en = new CultureInfo("en-US");                

                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();

                if (data.Count > 0)
                {
                    if (data.Count > 1)
                    {
                        ws.InsertRow(intStartRow, data.Count - 1, intStartRow);

                        string cellRng = "A{0}:U{1}".FormatWith(intStartRow, (intStartRow + data.Count - 2));
                        ws.Cells[cellRng].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        ws.Cells[cellRng].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    }

                    for (int i = 0; i < data.Count; i++)
                    {
                        ws.Cells["A{0}".FormatWith(intRow)].Value = i + 1;
                        ws.Cells["B{0}".FormatWith(intRow)].Value = data[i].EngOrgName;
                        ws.Cells["C{0}".FormatWith(intRow)].Value = data[i].ChiOrgName;
                        ws.Cells["D{0}".FormatWith(intRow)].Value = data[i].OrgRef;
                        ws.Cells["E{0}".FormatWith(intRow)].Value = "{0}{1}(since {2})".FormatWith(data[i].ComplaintsReceivedB4, Environment.NewLine, data[i].ComplaintsReceivedSince.Value.ToString("MMM yyyy", en));
                        ws.Cells["F{0}".FormatWith(intRow)].Value = data[i].NoOfWarningLetterB4;
                        ws.Cells["G{0}".FormatWith(intRow)].Value = data[i].PspRef;
                        ws.Cells["H{0}".FormatWith(intRow)].Value = "{0:dd/MM/yyyy}".FormatWith(data[i].PermitIssueDate);
                        ws.Cells["I{0}".FormatWith(intRow)].Value = data[i].PermitNum;
                        ws.Cells["J{0}".FormatWith(intRow)].Value = "{0:dd/MM/yyyy}{1}~{1}{2:dd/MM/yyyy}".FormatWith(data[i].EventPeriodFrom, Environment.NewLine, data[i].EventPeriodTo);
                        ws.Cells["K{0}".FormatWith(intRow)].Value = data[i].NoOfEvents;
                        ws.Cells["L{0}".FormatWith(intRow)].Value = data[i].ComplaintsReceivedAF;
                        ws.Cells["M{0}".FormatWith(intRow)].Value = data[i].NoOfWarningLetterAF;
                        ws.Cells["N{0}".FormatWith(intRow)].Value = data[i].PspRef2nd.IsNotNullOrEmpty() ? data[i].PspRef2nd : "N.A.";
                        ws.Cells["O{0}".FormatWith(intRow)].Value = data[i].PermitNum2nd.IsNotNullOrEmpty() ? "{0:dd/MM/yyyy}".FormatWith(data[i].PermitIssueDate2nd) : "N.A.";
                        ws.Cells["P{0}".FormatWith(intRow)].Value = data[i].PermitNum2nd.IsNotNullOrEmpty() ? data[i].PermitNum2nd : "N.A.";
                        ws.Cells["Q{0}".FormatWith(intRow)].Value = data[i].PermitNum2nd.IsNotNullOrEmpty() ? "{0:dd/MM/yyyy}{1}~{1}{2:dd/MM/yyyy}".FormatWith(data[i].EventPeriodFrom2nd, Environment.NewLine, data[i].EventPeriodTo2nd) : "N.A.";
                        ws.Cells["R{0}".FormatWith(intRow)].Value = data[i].PermitNum2nd.IsNotNullOrEmpty() ? data[i].NoOfEvents2nd.ToString() : "N.A.";
                        ws.Cells["S{0}".FormatWith(intRow)].Value = data[i].RejectionLetterDate.HasValue ? data[i].RejectionLetterDate.Value.ToString("dd/MM/yyyy") : "N.A.";
                        ws.Cells["T{0}".FormatWith(intRow)].Value = data[i].RepresentationReceiveDate.HasValue ? data[i].RepresentationReceiveDate.Value.ToString("dd/MM/yyyy") : "N.A.";
                        ws.Cells["U{0}".FormatWith(intRow)].Value = data[i].Remark;

                        intRow++;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R18

        #region R19

        public System.IO.MemoryStream GenerateR19Excel(string templatePath)
        {
            IList<R19Dto> main = this._reportRepository.GetR19Report();
            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];

                if (main.Count > 0)
                {
                    int fromRow = 13;

                    //Setting the report header
                    ws.Cells[5, 1].Value = GeneratedBy();

                    if (main.Count > 2)
                        ws.InsertRow(fromRow, main.Count - 2, fromRow);

                    for (int i = 0; i < main.Count; i++)
                    {
                        ws.Cells[fromRow + i, 1].Value = main[i].ComplaintDate;

                        //if (main[i].InformedByPolice == false)
                        //{
                        //    ws.Cells[fromRow + i, 1].Value = main[i].ComplaintDate;
                        //}
                        //else
                        //{
                        //    ws.Cells[fromRow + i, 1].Value = "Informed by the Police";
                        //}

                        ws.Cells[fromRow + i, 2].Value = main[i].InformedByPolice == 0 ? "P" : "";
                        ws.Cells[fromRow + i, 3].Value = main[i].InformedByPolice == 0 ? "" : "P";
                        ws.Cells[fromRow + i, 4].Value = main[i].OrgRef;
                        ws.Cells[fromRow + i, 5].Value = main[i].EngOrgNameSorting;
                        ws.Cells[fromRow + i, 6].Value = main[i].ChiOrgName;
                        ws.Cells[fromRow + i, 7].Value = main[i].FundRaisingDate;
                        ws.Cells[fromRow + i, 8].Value = main[i].ConvictedPersonName;
                        ws.Cells[fromRow + i, 9].Value = main[i].ConvictedPersonPosition;
                        ws.Cells[fromRow + i, 10].Value = main[i].OffenceDetail;
                        ws.Cells[fromRow + i, 11].Value = main[i].SentenceDetail;
                        ws.Cells[fromRow + i, 12].Value = main[i].PoliceRefNum;
                        ws.Cells[fromRow + i, 13].Value = main[i].CourtRefNum;
                        ws.Cells[fromRow + i, 14].Value = main[i].CourtHearingDate;
                        ws.Cells[fromRow + i, 15].Value = main[i].CaseReferralRemark;
                    }
                }
                package.Save();
            }

            return resultStream;
        }

        #endregion R19

        #region R20

        public System.IO.MemoryStream GenerateR20Excel(string templatePath, DateTime? datefrom, DateTime? dateto)
        {
            IList<R20Dto> main = this._suggestionMasterRepository.GenerateR20Report(datefrom, dateto);
            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];

                //Setting the report header
                ws.Cells["A5"].Value = GeneratedBy();

                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(DateFromTo(datefrom, dateto));

                if (main.Count > 0)
                {
                    int fromRow = 14;

                    if (main.Count > 2)
                        ws.InsertRow(fromRow, main.Count - 2, fromRow);

                    for (int i = 0; i < main.Count; i++)
                    {
                        ws.Cells["A{0}".FormatWith(fromRow + i)].Value = i + 1;
                        if (main[i].SuggestionNature == "01")
                        {
                            ws.Cells["B{0}".FormatWith(fromRow + i)].Value = "S";
                        }
                        else if (main[i].SuggestionNature == "02")
                        {
                            ws.Cells["B{0}".FormatWith(fromRow + i)].Value = "C";
                        }
                        ws.Cells["C{0}".FormatWith(fromRow + i)].Value = main[i].StrSuggestionDate;
                        ws.Cells["D{0}".FormatWith(fromRow + i)].Value = main[i].SuggestionSenderName;
                        ws.Cells["E{0}".FormatWith(fromRow + i)].Value = main[i].SuggestionDescription;
                        ws.Cells["F{0}".FormatWith(fromRow + i)].Value = main[i].SuggestionRefNum;
                        ws.Cells["G{0}".FormatWith(fromRow + i)].Value = main[i].StrAcknowledgementSentDate;
                    }
                }
                package.Save();
            }

            return resultStream;
        }

        #endregion R20

        #region R21

        public System.IO.MemoryStream GenerateR21Excel(string templatePath, int? year)
        {
            IList<R21SummaryDto> dataSummary = this._reportRepository.GetR21SummaryReport(year);
            IList<R21ARDto> dataAR_All = this._reportRepository.GetR21ARReport(year);
            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(year.Value);
                ws.Cells["A10"].Value = ws.Cells["A10"].Text.FormatWith(year.Value);

                int intStartRow = 13;
                int intRow = intStartRow;

                if (dataSummary.Count > 0)
                {
                    if (dataSummary.Count > 1)
                        ws.InsertRow(intStartRow, dataSummary.Count - 1, intStartRow);

                    for (int i = 0; i < dataSummary.Count; i++)
                    {
                        if (i < dataSummary.Count - 1)
                        {
                            ws.Cells["A{0}:M{0}".FormatWith(intStartRow + dataSummary.Count - 1)].Copy(ws.Cells["A{0}:M{0}".FormatWith(intStartRow + i)]);
                            ws.Row(intStartRow + i).Height = ws.Row(intStartRow + dataSummary.Count - 1).Height;
                        }

                        ws.Cells["A{0}".FormatWith(intRow)].Value = dataSummary[i].PspYear;
                        ws.Cells["B{0}".FormatWith(intRow)].Value = dataSummary[i].PspReceived;
                        ws.Cells["C{0}".FormatWith(intRow)].Value = dataSummary[i].StatCount1;
                        ws.Cells["E{0}".FormatWith(intRow)].Value = dataSummary[i].StatCount2;
                        ws.Cells["G{0}".FormatWith(intRow)].Value = dataSummary[i].StatCount3;
                        ws.Cells["I{0}".FormatWith(intRow)].Value = dataSummary[i].StatCount4;
                        ws.Cells["K{0}".FormatWith(intRow)].Value = dataSummary[i].StatCount5;

                        intRow++;
                    }
                }

                List<decimal> filter = new List<decimal> { 0m, 0.2m, 0.25m };
                IList<R21ARDto> dataAR = dataAR_All;

                for (int i = 0; i < 3; i++)
                {
                    intStartRow = intRow = 3;
                    ws = package.Workbook.Worksheets[i + 2];
                    if (filter[i] > 0)
                        dataAR = dataAR_All.Where(x => x.ExpenditurePercent >= filter[i]).ToList<R21ARDto>();

                    if (dataAR.Count > 0)
                    {
                        if (dataAR.Count > 1)
                            ws.InsertRow(intStartRow, dataAR.Count - 1, intStartRow);

                        for (int j = 0; j < dataAR.Count; j++)
                        {
                            ws.Cells["C{0}".FormatWith(intRow)].Value = dataAR[j].OrgRef;
                            ws.Cells["D{0}".FormatWith(intRow)].Value = j + 1;
                            ws.Cells["E{0}".FormatWith(intRow)].Value = dataAR[j].EngOrgName;
                            ws.Cells["F{0}".FormatWith(intRow)].Value = dataAR[j].SubventedIndicator ? "P" : "";
                            ws.Cells["G{0}".FormatWith(intRow)].Value = dataAR[j].ChiOrgName;
                            ws.Cells["H{0}".FormatWith(intRow)].Value = dataAR[j].PspRef;
                            ws.Cells["I{0}".FormatWith(intRow)].Value = dataAR[j].PermitNum;
                            ws.Cells["J{0}".FormatWith(intRow)].Value = dataAR[j].GrossProceed;
                            ws.Cells["K{0}".FormatWith(intRow)].Value = dataAR[j].Expenditure;
                            ws.Cells["L{0}".FormatWith(intRow)].Value = dataAR[j].NetProceed;
                            ws.Cells["M{0}".FormatWith(intRow)].Formula = "=IF(J{1} > 0, K{0}/J{1}, \"\")".FormatWith(intRow, intRow);
                            ws.Cells["N{0}".FormatWith(intRow)].Value = dataAR[j].DocRemark;

                            intRow++;
                        }
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R21

        #region R22

        public System.IO.MemoryStream GenerateR22Excel(string templatePath, DateTime? datefrom, DateTime? dateto)
        {
            IList<R22Dto> data = this._reportRepository.GetR22Report(datefrom, dateto);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(DateFromTo(datefrom, dateto));

                if (data.Count > 0)
                {
                    int intStartRow = 11;
                    int intRow = intStartRow;

                    if (data.Count > 1)
                        ws.InsertRow(intStartRow, data.Count - 1, intStartRow);

                    for (int i = 0; i < data.Count; i++)
                    {
                        ws.Cells["A{0}".FormatWith(intRow)].Value = i + 1;
                        ws.Cells["B{0}".FormatWith(intRow)].Value = data[i].EngOrgName;
                        ws.Cells["D{0}".FormatWith(intRow)].Value = data[i].ChiOrgName;
                        ws.Cells["E{0}".FormatWith(intRow)].Value = data[i].PspRef;
                        ws.Cells["F{0}".FormatWith(intRow)].Value = data[i].ApprovalType;
                        ws.Cells["G{0}".FormatWith(intRow)].Value = data[i].EventPeriodFrom;
                        ws.Cells["H{0}".FormatWith(intRow)].Value = data[i].EventPeriodTo;
                        ws.Cells["I{0}".FormatWith(intRow)].Value = data[i].FlagDayCount;
                        ws.Cells["J{0}".FormatWith(intRow)].Value = data[i].TotalEventCount;

                        ws.Row(intRow).Height = PixeltoHeight(26);
                        intRow++;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R22

        #region R23

        public System.IO.MemoryStream GenerateR23Excel(string templatePath, int? datefrom, int? dateto)
        {
            //TODO: Input should be year only
            IList<R23Dto> data = this._reportRepository.GetR23Report(datefrom, dateto);

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(DateFromTo(datefrom, dateto));
                if (data.Count > 0)
                {
                    for (int i = 0; i < data.Count; i++)
                    {
                        ws.Cells["A{0}".FormatWith(i + 11)].Formula = "=ROW()-10";
                        ws.Cells["C{0}".FormatWith(i + 11)].Value = data[i].EngOrgName;
                        ws.Cells["D{0}".FormatWith(i + 11)].Value = data[i].ChiOrgName;
                        ws.Cells["G{0}".FormatWith(i + 11)].Value = data[i].OrgRef;
                        ws.Cells["AB{0}".FormatWith(i + 11)].Value = data[i].R1;
                        ws.Cells["AC{0}".FormatWith(i + 11)].Value = data[i].R2;
                        ws.Cells["AD{0}".FormatWith(i + 11)].Value = data[i].R3;
                        ws.Cells["AE{0}".FormatWith(i + 11)].Value = data[i].R4;
                        ws.Cells["AI{0}".FormatWith(i + 11)].Value = data[i].AfrDate;
                        ws.Cells["BB{0}".FormatWith(i + 11)].Value = data[i].PermitNums;
                        ws.Cells["CQ{0}".FormatWith(i + 11)].Value = data[i].OrgAnnualIncome;
                        ws.Cells["CR{0}".FormatWith(i + 11)].Value = data[i].LastVersionDate;
                        ws.Cells["CS{0}".FormatWith(i + 11)].Value = data[i].BelowInd;
                    }

                    string cellRng = "A{0}:CS{1}".FormatWith("11", (10 + data.Count).ToString());
                    using (var rng = ws.Cells[cellRng])
                    {
                        rng.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        rng.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        rng.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        rng.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        rng.Style.WrapText = true;
                    }
                    ws.Cells["CQ11:CQ" + ws.Dimension.End.Row].Style.Numberformat.Format = "#,##0.00_ ";
                    ws.Cells["AI11:AI" + ws.Dimension.End.Row].Style.Numberformat.Format = "dd-MM-yyyy";
                    ws.Cells["CR11:CR" + ws.Dimension.End.Row].Style.Numberformat.Format = "dd-MM-yyyy";
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R23

        #region R24

        public int checkBenchmarkIsNumeric(string strBenchmarkRFD)
        {
            int intBenchmark = 0;
            if (!int.TryParse(strBenchmarkRFD, out intBenchmark))
            {
                // Benchmark get from Lookup Table is not numeric
                throw new Exception(String.Format(_messageService.GetMessage(SystemMessage.Error.Lookup.ValueMustNumeric), strBenchmarkRFD));
            }
            return intBenchmark;
        }

        public string getFdPeriodString(string FdYear)
        {
            string strFdPeriod = FdYear + " (01/04/{0} - 31/03/{1})";

            strFdPeriod = String.Format(strFdPeriod,
                                        (Convert.ToInt16(FdYear.Substring(0, 2)) + 2000).ToString(),
                                        (Convert.ToInt16(FdYear.Substring(FdYear.Length - 2, 2)) + 2000).ToString());

            return strFdPeriod;
        }

        public System.IO.MemoryStream GenerateR24Excel(string templatePath, string strFlagYear)
        {
            string strCriteriaYear = (Convert.ToInt16(strFlagYear.Substring(0, 2)) + 2000 - 2).ToString();

            string FdYear2ndPeriod = _flagDayService.switchToPreviousFdYear(strFlagYear);
            string FdYear1stPeriod = _flagDayService.switchToPreviousFdYear(FdYear2ndPeriod);

            IDictionary<string, string> benchmarkTWFD = _lookupService.getAllLkpInCodec(LookupType.BenchmarkTWFD);
            IDictionary<string, string> benchmarkRFD = _lookupService.getAllLkpInCodec(LookupType.BenchmarkRFD);

            if (benchmarkTWFD == null || benchmarkRFD == null ||
                !benchmarkTWFD.ContainsKey(FdYear1stPeriod) || !benchmarkTWFD.ContainsKey(FdYear2ndPeriod) ||
                !benchmarkRFD.ContainsKey(FdYear1stPeriod) || !benchmarkRFD.ContainsKey(FdYear2ndPeriod))
            {
                // Benchmark of the selected 'Flag Year' not found.
                throw new Exception(String.Format(_messageService.GetMessage(SystemMessage.Error.Lookup.NotFound), FdYear1stPeriod + " / " + FdYear2ndPeriod));
            }

            // Check the Benchmark is numeric
            int intBenchmarkTWFD1st = checkBenchmarkIsNumeric(benchmarkTWFD[FdYear1stPeriod]);
            int intBenchmarkTWFD2nd = checkBenchmarkIsNumeric(benchmarkTWFD[FdYear2ndPeriod]);
            int intBenchmarkRFD1st = checkBenchmarkIsNumeric(benchmarkRFD[FdYear1stPeriod]);
            int intBenchmarkRFD2nd = checkBenchmarkIsNumeric(benchmarkRFD[FdYear2ndPeriod]);

            // Get Report Data
            IList<R24Dto> twr = this._reportRepository.GetR24Report(strCriteriaYear, 1);
            IList<R24Dto> rfd = this._reportRepository.GetR24Report(strCriteriaYear, 2);

            MemoryStream resultStream = new MemoryStream();

            IList<R24Dto> exPledging;
            decimal avg = 0;

            string meetAll = "P";
            object meet1;
            object meet2;

            string colorPledgingBackground;
            string colorPledging;
            string colorMeet1;
            string colorMeet2;

            //Percentage
            decimal perMeet1 = 0;
            decimal perMeet2 = 0;
            
            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];

                ws.Name = "TWFD {0}".FormatWith(strCriteriaYear);
                
                ws.HeaderFooter.OddHeader.CenteredText = "Calculation of Benchmark for 20{1} Flag Days (Territory-wide)".FormatWith(strCriteriaYear, strFlagYear);

                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(strCriteriaYear, strFlagYear);
                ws.Cells["D19"].Value = ws.Cells["D19"].Text.FormatWith(getFdPeriodString(FdYear1stPeriod));
                ws.Cells["F19"].Value = intBenchmarkTWFD1st;
                ws.Cells["D20"].Value = ws.Cells["D20"].Text.FormatWith(getFdPeriodString(FdYear2ndPeriod));
                ws.Cells["F20"].Value = intBenchmarkTWFD2nd;

                if (twr.Count > 0)
                {
                    int fromRow = 11;

                    string exclSN = "";
                    string exclCell = "";
                    int below1 = 0;
                    int below2 = 0;

                    //Get the styles and symbols from template;
                    colorPledgingBackground = ws.Cells[fromRow + 11, 3].Style.Fill.BackgroundColor.Rgb;
                    colorPledging = ws.Cells[fromRow + 11, 4].Style.Font.Color.Rgb;

                    meet1 = ws.Cells[fromRow + 12, 3].Value;
                    colorMeet1 = ws.Cells[fromRow + 12, 3].Style.Font.Color.Rgb;

                    meet2 = ws.Cells[fromRow + 13, 3].Value;
                    colorMeet2 = ws.Cells[fromRow + 13, 3].Style.Font.Color.Rgb;

                    //Get the meeting criteria
                    string formula = ws.Cells[fromRow + 6, 6].Formula;
                    perMeet1 = decimal.Parse(formula.Substring(formula.IndexOf("*") + 1, formula.IndexOf("%") - formula.IndexOf("*") - 1)) / 100;

                    formula = ws.Cells[fromRow + 7, 6].Formula;
                    perMeet2 = decimal.Parse(formula.Substring(formula.IndexOf("*") + 1, formula.IndexOf("%") - formula.IndexOf("*") - 1)) / 100;

                    exPledging = twr.AsParallel().Where(x => x.ApplyPledgingMechanismIndicator == false).ToList<R24Dto>();
                    if (exPledging.Count > 0)
                        avg = exPledging.Sum(x => x.NetProceed) / exPledging.Count;

                    //Setting the report header
                    ws.Cells[5, 1].Value = GeneratedBy();
                    ws.Cells[8, 1].Value = ws.Cells[8, 1].Value.ToString().FormatWith(strCriteriaYear);

                    ws.Cells[fromRow + 5, 4].Value = ws.Cells[fromRow + 5, 4].Text.FormatWith(exPledging.Count);
                    ws.Cells[fromRow + 5, 6].Formula = "={0}/{1}".FormatWith(ws.Cells[fromRow + 5, 6].Formula, exPledging.Count);

                    ws.InsertRow(fromRow + 1, twr.Count - 1);

                    for (int i = 0; i < twr.Count; i++)
                    {
                        if (i < twr.Count - 1)
                        {
                            ws.Cells[fromRow + i, 1, fromRow + i, 7].Copy(ws.Cells[fromRow + i + 1, 1, fromRow + i + 1, 7]);
                        }

                        ws.Cells[fromRow + i, 1].Value = i + 1;
                        ws.Cells[fromRow + i, 2].Value = twr[i].FlagDay == null ? "" : twr[i].FlagDay.Value.ToString("dd/MM/yyyy");
                        ws.Cells[fromRow + i, 3].Value = "TW";
                        ws.Cells[fromRow + i, 4].Value = twr[i].EngOrgNameSorting;
                        ws.Cells[fromRow + i, 5].Value = twr[i].ChiOrgName;
                        ws.Cells[fromRow + i, 6].Value = twr[i].NetProceed;

                        // Meet Benchmark
                        //if (twr[i].NetProceed >= Convert.ToInt32(twr[i].Benchmark))
                        if (twr[i].NetProceed >= avg * perMeet1)
                        {
                            ws.Cells[fromRow + i, 7].Value = meetAll;
                            ws.Cells[fromRow + i, 7].Style.Font.Name = "Wingdings 2";
                        }
                        else if (twr[i].NetProceed < avg * perMeet2)
                        {
                            // Net Proceeds below 55% of Average Net Proceeds

                            below2++;

                            ws.Cells[fromRow + i, 7].IsRichText = true;

                            ExcelRichTextCollection rtfCollection = ws.Cells[fromRow + i, 7].RichText;
                            ExcelRichText ert = rtfCollection.Add("{0}".FormatWith(meet1));
                            ert.Color = ColorFromRgb(colorMeet1);
                            ert.Bold = true;

                            ert = rtfCollection.Add("{0}".FormatWith(meet2));
                            ert.Color = ColorFromRgb(colorMeet2);
                        }
                        else if (twr[i].NetProceed < avg * perMeet1)
                        {
                            // Net Proceeds below 60% of Average Net Proceeds

                            below1++;
                            ws.Cells[fromRow + i, 7].Value = meet1;
                            ws.Cells[fromRow + i, 7].Style.Font.Color.SetColor(ColorFromRgb(colorMeet1));
                            ws.Cells[fromRow + i, 7].Style.Font.Bold = true;
                        }

                        if (twr[i].ApplyPledgingMechanismIndicator == true)
                        {
                            if (exclSN.Length > 0)
                            {
                                exclSN = "{0}+{1}".FormatWith(exclSN, i + 1);
                                exclCell = "{0}+{1}".FormatWith(exclCell, ws.Cells[fromRow + i, 6].Address);
                            }
                            else
                            {
                                exclSN = "{0}".FormatWith(i + 1);
                                exclCell = "{0}".FormatWith(ws.Cells[fromRow + i, 6].Address);
                            }

                            ws.Cells[fromRow + i, 1, fromRow + i, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            ws.Cells[fromRow + i, 1, fromRow + i, 6].Style.Fill.BackgroundColor.SetColor(ColorFromRgb(colorPledgingBackground));

                            ws.Cells[fromRow + i, 2, fromRow + i, 6].Style.Font.Color.SetColor(ColorFromRgb(colorPledging));
                        }
                    }

                    ws.Cells[fromRow + (twr.Count - 1) + 4, 4].Value = ws.Cells[fromRow + (twr.Count - 1) + 4, 4].Value.ToString().FormatWith(exclSN);
                    ws.Cells[fromRow + (twr.Count - 1) + 4, 6].Formula = exclCell.IsNotNullOrEmpty() ? "={0}-({1})".FormatWith(ws.Cells[fromRow + (twr.Count - 1) + 3, 6].Address, exclCell) : "={0}".FormatWith(ws.Cells[fromRow + (twr.Count - 1) + 3, 6].Address);

                    ws.Cells[fromRow + (twr.Count - 1) + 12, 4].Value = ws.Cells[fromRow + (twr.Count - 1) + 12, 4].Value.ToString().FormatWith(below1 + below2);
                    ws.Cells[fromRow + (twr.Count - 1) + 13, 4].Value = ws.Cells[fromRow + (twr.Count - 1) + 13, 4].Value.ToString().FormatWith(below2);
                }

                ws = package.Workbook.Worksheets[2];
                ws.HeaderFooter.OddHeader.CenteredText = "Calculation of Benchmark for 20{1} Flag Days (Region)".FormatWith(strCriteriaYear, strFlagYear);

                ws.Name = "RFD {0}".FormatWith(strCriteriaYear);
                ws.Cells["D10"].Value = ws.Cells["D10"].Text.FormatWith(getFdPeriodString(FdYear1stPeriod));
                ws.Cells["F10"].Value = intBenchmarkRFD1st;
                ws.Cells["D11"].Value = ws.Cells["D11"].Text.FormatWith(getFdPeriodString(FdYear2ndPeriod));
                ws.Cells["F11"].Value = intBenchmarkRFD2nd;

                if (rfd.Count > 0)
                {
                    int fromRow = 2;

                    string exclSN = "";
                    string exclCell = "";
                    int below1 = 0;
                    int below2 = 0;

                    avg = 0;

                    //Get the styles and symbols from template;
                    colorPledgingBackground = ws.Cells[fromRow + 11, 3].Style.Fill.BackgroundColor.Rgb;
                    colorPledging = ws.Cells[fromRow + 11, 4].Style.Font.Color.Rgb;

                    //meetAll = ws.Cells[fromRow, 6].Value;

                    meet1 = ws.Cells[fromRow + 12, 3].Value;
                    colorMeet1 = ws.Cells[fromRow + 12, 3].Style.Font.Color.Rgb;

                    meet2 = ws.Cells[fromRow + 13, 3].Value;
                    colorMeet2 = ws.Cells[fromRow + 13, 3].Style.Font.Color.Rgb;

                    //Get the meeting criteria
                    string formula = ws.Cells[fromRow + 6, 6].Formula;
                    perMeet1 = decimal.Parse(formula.Substring(formula.IndexOf("*") + 1, formula.IndexOf("%") - formula.IndexOf("*") - 1)) / 100;

                    formula = ws.Cells[fromRow + 7, 6].Formula;
                    perMeet2 = decimal.Parse(formula.Substring(formula.IndexOf("*") + 1, formula.IndexOf("%") - formula.IndexOf("*") - 1)) / 100;

                    exPledging = rfd.AsParallel().Where(x => x.ApplyPledgingMechanismIndicator == false).ToList<R24Dto>();
                    if (exPledging.Count > 0)
                        avg = exPledging.Sum(x => x.NetProceed) / exPledging.Count;

                    ws.Cells[fromRow + 5, 4].Value = ws.Cells[fromRow + 5, 4].Value.ToString().FormatWith(exPledging.Count);
                    ws.Cells[fromRow + 5, 6].Formula = "={0}/{1}".FormatWith(ws.Cells[fromRow + 5, 6].Formula, exPledging.Count);

                    ws.InsertRow(fromRow + 1, rfd.Count - 1);

                    for (int i = 0; i < rfd.Count; i++)
                    {
                        if (i < rfd.Count - 1)
                        {
                            ws.Cells[fromRow + i, 1, fromRow + i, 7].Copy(ws.Cells[fromRow + i + 1, 1, fromRow + i + 1, 7]);
                        }

                        ws.Cells[fromRow + i, 1].Value = i + 1;
                        ws.Cells[fromRow + i, 2].Value = rfd[i].FlagDay == null ? "" : rfd[i].FlagDay.Value.ToString("dd/MM/yyyy");
                        ws.Cells[fromRow + i, 3].Value = rfd[i].Region;
                        ws.Cells[fromRow + i, 4].Value = rfd[i].EngOrgNameSorting;
                        ws.Cells[fromRow + i, 5].Value = rfd[i].ChiOrgName;
                        ws.Cells[fromRow + i, 6].Value = rfd[i].NetProceed;

                        // Meet Benchmark
                        //if (rfd[i].NetProceed >= Convert.ToInt32(rfd[i].Benchmark))
                        if (rfd[i].NetProceed >= avg * perMeet1)
                        {
                            ws.Cells[fromRow + i, 7].Value = meetAll;
                            ws.Cells[fromRow + i, 7].Style.Font.Name = "Wingdings 2";
                        }
                        else if (rfd[i].NetProceed < avg * perMeet2)
                        {
                            below2++;

                            ws.Cells[fromRow + i, 7].IsRichText = true;

                            ExcelRichTextCollection rtfCollection = ws.Cells[fromRow + i, 7].RichText;
                            ExcelRichText ert = rtfCollection.Add("{0}".FormatWith(meet1));
                            ert.Color = ColorFromRgb(colorMeet1);
                            ert.Bold = true;

                            ert = rtfCollection.Add("{0}".FormatWith(meet2));
                            ert.Color = ColorFromRgb(colorMeet2);
                        }
                        else if (rfd[i].NetProceed < avg * perMeet1)
                        {
                            below1++;
                            ws.Cells[fromRow + i, 7].Value = meet1;
                            ws.Cells[fromRow + i, 7].Style.Font.Color.SetColor(ColorFromRgb(colorMeet1));
                            ws.Cells[fromRow + i, 7].Style.Font.Bold = true;
                        }

                        if (rfd[i].ApplyPledgingMechanismIndicator == true)
                        {
                            if (exclSN.Length > 0)
                            {
                                exclSN = "{0}+{1}".FormatWith(exclSN, i + 1);
                                exclCell = "{0}+{1}".FormatWith(exclCell, ws.Cells[fromRow + i, 6].Address);
                            }
                            else
                            {
                                exclSN = "{0}".FormatWith(i + 1);
                                exclCell = "{0}".FormatWith(ws.Cells[fromRow + i, 6].Address);
                            }

                            ws.Cells[fromRow + i, 1, fromRow + i, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            ws.Cells[fromRow + i, 1, fromRow + i, 6].Style.Fill.BackgroundColor.SetColor(ColorFromRgb(colorPledgingBackground));

                            ws.Cells[fromRow + i, 2, fromRow + i, 6].Style.Font.Color.SetColor(ColorFromRgb(colorPledging));
                        }
                    }

                    ws.Cells[fromRow + (rfd.Count - 1) + 4, 4].Value = ws.Cells[fromRow + (rfd.Count - 1) + 4, 4].Text.FormatWith(exclSN);
                    //ws.Cells[fromRow + (rfd.Count - 1) + 4, 5].Value = "'={0}-({1})".FormatWith(ws.Cells[fromRow + (rfd.Count - 1) + 3, 5].Address, exclCell);
                    ws.Cells[fromRow + (rfd.Count - 1) + 4, 6].Formula = exclCell.IsNotNullOrEmpty() ? "={0}-({1})".FormatWith(ws.Cells[fromRow + (rfd.Count - 1) + 3, 6].Address, exclCell) : "={0}".FormatWith(ws.Cells[fromRow + (rfd.Count - 1) + 3, 6].Address);

                    ws.Cells[fromRow + (rfd.Count - 1) + 12, 4].Value = ws.Cells[fromRow + (rfd.Count - 1) + 12, 4].Text.FormatWith(below1 + below2);
                    ws.Cells[fromRow + (rfd.Count - 1) + 13, 4].Value = ws.Cells[fromRow + (rfd.Count - 1) + 13, 4].Text.FormatWith(below2);
                }
                package.Save();
            }

            return resultStream;
        }

        #endregion R24

        #region R25

        public System.IO.MemoryStream GenerateR25Excel(string templatePath, DateTime? sentDate, DateTime? toDate)
        {
            IList<R25AllDto> dataAll = this._reportRepository.GetR25AllReport(sentDate, toDate);
            IList<R25SummaryDto> dataSummary = this._reportRepository.GetR25SummaryReport();

            MemoryStream resultStream = new MemoryStream();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                // All
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value =
                    ws.Cells["A8"].Text.FormatWith((sentDate.HasValue ? "From " + sentDate.Value.ToString("dd/MM/yyyy") + " " : "") +
                                                   (toDate.HasValue ? "To " + toDate.Value.ToString("dd/MM/yyyy") + " " : ""));

                int intStartRow = 12;
                if (dataAll.Count > 0)
                {
                    if (dataAll.Count > 1)
                        ws.InsertRow(intStartRow, dataAll.Count - 1, intStartRow);

                    string cellAddr = "B{0}:AN{1}".FormatWith(intStartRow, (dataAll.Count + 11));
                    //ws.Cells[cellAddr].LoadFromCollection(Collection: dataAll, PrintHeaders: false);

                    for (int i = 0; i < dataAll.Count; i++)
                    {
                        ws.Cells[intStartRow + i, 1].Value = i + 1;
                        ws.Cells[intStartRow + i, 2].Value = dataAll[i].EngOrgName;
                        ws.Cells[intStartRow + i, 3].Value = dataAll[i].ChiOrgName;
                        ws.Cells[intStartRow + i, 4].Value = dataAll[i].Subvented;
                        ws.Cells[intStartRow + i, 5].Value = dataAll[i].FullyAdopt;
                        ws.Cells[intStartRow + i, 6].Value = dataAll[i].PartiallyAdopt;
                        ws.Cells[intStartRow + i, 7].Value = dataAll[i].WillNotAdopt;
                        ws.Cells[intStartRow + i, 8].Value = dataAll[i].A1;
                        ws.Cells[intStartRow + i, 9].Value = dataAll[i].A2;
                        ws.Cells[intStartRow + i, 10].Value = dataAll[i].A3;
                        ws.Cells[intStartRow + i, 11].Value = dataAll[i].A4;
                        ws.Cells[intStartRow + i, 12].Value = dataAll[i].A5;
                        ws.Cells[intStartRow + i, 13].Value = dataAll[i].A6;
                        ws.Cells[intStartRow + i, 14].Value = dataAll[i].A7;
                        ws.Cells[intStartRow + i, 15].Value = dataAll[i].A8;
                        ws.Cells[intStartRow + i, 16].Value = dataAll[i].B1;
                        ws.Cells[intStartRow + i, 17].Value = dataAll[i].B2;
                        ws.Cells[intStartRow + i, 18].Value = dataAll[i].B3;
                        ws.Cells[intStartRow + i, 19].Value = dataAll[i].B4;
                        ws.Cells[intStartRow + i, 20].Value = dataAll[i].B5;
                        ws.Cells[intStartRow + i, 21].Value = dataAll[i].B6;
                        ws.Cells[intStartRow + i, 22].Value = dataAll[i].C1;
                        ws.Cells[intStartRow + i, 23].Value = dataAll[i].C2;
                        ws.Cells[intStartRow + i, 24].Value = dataAll[i].C3;
                        ws.Cells[intStartRow + i, 25].Value = dataAll[i].C4;
                        ws.Cells[intStartRow + i, 26].Value = dataAll[i].C5;
                        ws.Cells[intStartRow + i, 27].Value = dataAll[i].C6;
                        ws.Cells[intStartRow + i, 28].Value = dataAll[i].C7;
                        ws.Cells[intStartRow + i, 29].Value = dataAll[i].Others;
                        ws.Cells[intStartRow + i, 30].Value = dataAll[i].PromulgationReason;
                        ws.Cells[intStartRow + i, 31].Value = dataAll[i].SendDate;
                        ws.Cells[intStartRow + i, 32].Value = dataAll[i].ReplySlipReceiveDate;
                        ws.Cells[intStartRow + i, 33].Value = dataAll[i].Remarks;
                        ws.Cells[intStartRow + i, 34].Value = dataAll[i].ReplySlipDate;
                        ws.Cells[intStartRow + i, 35].Value = dataAll[i].PartNum;
                        ws.Cells[intStartRow + i, 36].Value = dataAll[i].EnclosureNum;                        
                    }
                    
                    ws.Cells["C{0}".FormatWith(intStartRow + dataAll.Count)].Formula = "=COUNTA(C{0}:C{1})".FormatWith(intStartRow, intStartRow + dataAll.Count - 1);
                }

                //Summary
                ws = package.Workbook.Worksheets[2];
                ws.Cells["A1"].Value = ws.Cells["A1"].Text.FormatWith(DateTime.Now);

                if (dataSummary.Count > 0)
                {
                    for (int i = 0; i < dataSummary.Count; i++)
                    {
                        if (dataSummary[i].Sort == 4)
                            ws.Cells[3, 2].Value = Convert.ToInt16(ws.Cells[3, 2].Value) + dataSummary[i].Cnt;
                        else
                            ws.Cells[dataSummary[i].Sort, 2].Value = dataSummary[i].Cnt;

                        ws.Cells[dataSummary[i].Sort, 3].Value = dataSummary[i].FullyAdopt;
                        ws.Cells[dataSummary[i].Sort, 4].Value = dataSummary[i].FullyAdoptNotInMailing;
                        ws.Cells[dataSummary[i].Sort, 5].Value = dataSummary[i].PartiallyAdopt;
                        ws.Cells[dataSummary[i].Sort, 6].Value = dataSummary[i].PartiallyAdoptNotInMailing;
                        ws.Cells[dataSummary[i].Sort, 7].Value = dataSummary[i].WillNotAdopt;
                        ws.Cells[dataSummary[i].Sort, 8].Value = dataSummary[i].WillNotAdoptNotInMailing;
                    }
                }

                package.Save();
            }

            return resultStream;
        }

        #endregion R25

        #region R26

        public System.IO.MemoryStream GenerateR26Excel(string templatePath, DateTime? datefrom, DateTime? dateto)
        {
            IList<Lookup> legalAdvices = _lookupService.GetAllLookupListByType(LookupType.LegalAdviceType);
            IList<Lookup> venues = _lookupService.GetAllLookupListByType(LookupType.VenueType);

            IList<R26Dto> data = this._reportRepository.GetR26Report(datefrom, dateto);

            MemoryStream resultStream = new MemoryStream();
            string[] names = Assembly.GetExecutingAssembly().GetManifestResourceNames();

            using (var templateStream = File.OpenRead(templatePath))
            using (var package = new ExcelPackage(resultStream, templateStream))
            {
                var ws = package.Workbook.Worksheets[1];
                ws.Cells["A5"].Value = GeneratedBy();
                ws.Cells["A8"].Value = ws.Cells["A8"].Text.FormatWith(DateFromTo(datefrom, dateto));

                //Set the remark
                int intStartRow = 18;
                int intRow = intStartRow;
                int intToCol = 9;

                int intInsertRow = legalAdvices.Count > venues.Count + 1 ? legalAdvices.Count : venues.Count + 1;
                if (intInsertRow > 1)
                    ws.InsertRow(intStartRow + 1, intInsertRow - 1, intStartRow);

                for (int i = 0; i < legalAdvices.Count; i++)
                {
                    ws.Cells[intRow, 2].Value = legalAdvices[i].Code;
                    ws.Cells[intRow, 3].Value = legalAdvices[i].EngDescription;
                    intRow++;
                }

                intRow = intStartRow;
                for (int i = 0; i < venues.Count; i++)
                {
                    ws.Cells[intRow, 5].Value = venues[i].Code;
                    ws.Cells[intRow, 6].Value = venues[i].EngDescription;
                    intRow++;
                }

                ws.Cells[intRow, 5].Value = "X";
                ws.Cells[intRow, 6].Value = "N/A";

                double dRemarkHeight = PixeltoHeight(16);
                for (int i = intStartRow; i < intStartRow + intInsertRow; i++)
                    ws.Row(i).Height = dRemarkHeight;

                //Field the data
                intRow = intStartRow = 14;

                string strTableHeader = ws.Cells[intStartRow, 1].Text;
                RomanInterceptProvider provider = new RomanInterceptProvider();

                string strPrevType = "";
                string strPrevSubType = "";
                string strPrevCode = "";
                string strCurCode = "";

                int intTypeCnt = 0;
                int intMerge = 0;

                if (data.Count > 0)
                {
                    for (int i = 0; i < data.Count; i++)
                    {
                        //Merge the row will same Advice Type, Sub Code Type and Code
                        strCurCode = "{0}-{1}-{2}".FormatWith(data[i].LegalAdviceCodeType, data[i].LegalAdviceCodeSubType, data[i].LegalAdviceCodeCode);

                        if (data[i].LegalAdviceCodeType.IsNotNullOrEmpty() && strPrevCode == strCurCode)
                            intMerge++;
                        else if (intMerge > 0)
                        {
                            for (int j = 1; j <= 3; j++)
                                ws.Cells[intRow - (intMerge + 1), j, intRow - 1, j].Merge = true;

                            for (int j = intMerge + 1; j > 1; j--)
                                ws.Cells[intRow - j, 4, intRow - j, intToCol].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;

                            intMerge = 0;
                        }

                        //Advice Code Header
                        if (data[i].AdviceCode != strPrevType)
                        {
                            if (intTypeCnt > 0)
                            {
                                ws.InsertRow(intRow, 1, intStartRow);
                                ws.Cells[intRow, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                ws.Cells[intRow, 1, intRow, intToCol].Merge = true;
                            }

                            intTypeCnt++;

                            ws.Cells[intRow, 1].Value = string.Format(provider, strTableHeader, (byte)intTypeCnt, legalAdvices.Where(l => l.Code == data[i].AdviceCode).First().EngDescription);
                            intRow++;
                        }

                        //SubCode Header
                        if (data[i].VenueCode.IsNotNullOrEmpty() && data[i].VenueCode != strPrevSubType)
                        {
                            Lookup subType = venues.Where(l => l.Code == data[i].VenueCode).First();

                            ws.InsertRow(intRow, 1, intStartRow);
                            ws.Row(intRow).Height = PixeltoHeight(26);

                            ws.Cells[intRow, 1].Value = "{0}. {1}".FormatWith(subType.Code, subType.EngDescription);
                            ws.Cells[intRow, 1].Style.Font.Size = 14;
                            ws.Cells[intRow, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            ws.Cells[intRow, 1, intRow, intToCol].Merge = true;
                            ws.Cells[intRow, 1, intRow, intToCol].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                            intRow++;
                        }

                        //Data
                        if (data[i].LegalAdviceCodeType.IsNotNullOrEmpty())
                        {
                            ws.InsertRow(intRow, 1);

                            ws.Cells[intRow, 1, intRow, intToCol].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            ws.Cells[intRow, 1, intRow, intToCol].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            ws.Cells[intRow, 1, intRow, intToCol].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                            ws.Cells[intRow, intToCol].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                            ws.Cells[intRow, 1].Value = data[i].LegalAdviceCodeType;
                            ws.Cells[intRow, 2].Value = data[i].LegalAdviceCodeSubType;
                            ws.Cells[intRow, 3].Value = data[i].LegalAdviceCodeCode;
                            ws.Cells[intRow, 4].Value = data[i].LegalAdviceDescription;
                            ws.Cells[intRow, 5].Value = data[i].EnclosureNum;
                            ws.Cells[intRow, 6].Value = data[i].PartNum;
                            ws.Cells[intRow, 7].Value = data[i].EffectiveDate;

                            ws.Cells[intRow, 8].Value = data[i].PspRequire;
                            ws.Cells[intRow, 9].Value = data[i].Remarks;

                            intRow++;
                        }

                        strPrevType = data[i].AdviceCode;
                        strPrevSubType = data[i].VenueCode;
                        strPrevCode = strCurCode;
                    }
                }
                package.Save();
            }

            return resultStream;
        }

        public class RomanInterceptProvider : IFormatProvider, ICustomFormatter
        {
            public object GetFormat(Type formatType)
            {
                if (formatType == typeof(ICustomFormatter))
                    return this;
                else
                    return null;
            }

            public string Format(String format, Object obj, IFormatProvider provider)
            {
                // Display information about method call.
                string formatString = format ?? "<null>";
                Console.WriteLine("Provider: {0}, Object: {1}, Format String: {2}",
                                  provider, obj ?? "<null>", formatString);

                if (obj == null) return String.Empty;

                // If this is a byte and the "R" format string, format it with Roman numerals.
                if (obj is Byte && formatString.ToUpper().Equals("R"))
                {
                    Byte value = (Byte)obj;
                    int remainder;
                    int result;
                    String returnString = String.Empty;

                    // Get the hundreds digit(s)
                    result = Math.DivRem(value, 100, out remainder);
                    if (result > 0)
                        returnString = new String('C', result);
                    value = (Byte)remainder;
                    // Get the 50s digit
                    result = Math.DivRem(value, 50, out remainder);
                    if (result == 1)
                        returnString += "L";
                    value = (Byte)remainder;
                    // Get the tens digit.
                    result = Math.DivRem(value, 10, out remainder);
                    if (result > 0)
                        returnString += new String('X', result);
                    value = (Byte)remainder;
                    // Get the fives digit.
                    result = Math.DivRem(value, 5, out remainder);
                    if (result > 0)
                        returnString += "V";
                    value = (Byte)remainder;
                    // Add the ones digit.
                    if (remainder > 0)
                        returnString += new String('I', remainder);

                    // Check whether we have too many X characters.
                    int pos = returnString.IndexOf("XXXX");
                    if (pos >= 0)
                    {
                        int xPos = returnString.IndexOf("L");
                        if (xPos >= 0 & xPos == pos - 1)
                            returnString = returnString.Replace("LXXXX", "XC");
                        else
                            returnString = returnString.Replace("XXXX", "XL");
                    }
                    // Check whether we have too many I characters
                    pos = returnString.IndexOf("IIII");
                    if (pos >= 0)
                        if (returnString.IndexOf("V") >= 0)
                            returnString = returnString.Replace("VIIII", "IX");
                        else
                            returnString = returnString.Replace("IIII", "IV");

                    return returnString;
                }

                // Use default for all other formatting.
                if (obj is IFormattable)
                    return ((IFormattable)obj).ToString(format, CultureInfo.CurrentCulture);
                else
                    return obj.ToString();
            }
        }

        #endregion R26

        #region Export To Excel

        public System.IO.MemoryStream ExportToExcel<T>(IList<T> dataList, Dictionary<string, Func<object, object>> columnMappings = null, ColumnModel columnModel = null, List<string> filterCriterias = null, bool showHiddenCol = false)
        {
            List<string> arrColumnIds = new List<String>();
            List<string> arrColumnNames = new List<String>();
            List<string> arrDate = new List<string>();

            PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(T));

            //start Looping Data
            if (columnModel != null)
            {
                getColNameFromJson(properties, columnModel, showHiddenCol, ref arrColumnIds, ref arrColumnNames);
                arrDate = (columnModel.models).
                                Where(x => x.formatter.IsNotNullOrEmpty() && x.formatter == "date_string").
                                Select(x => x.name).ToList<string>();
            }
            else
            {
                getColIdsFromT(typeof(T), columnMappings, ref arrColumnIds);
                arrColumnNames = arrColumnIds;
            }

            MemoryStream resultStream = new MemoryStream();

            // Create the package and make sure you wrap it in a using statement
            using (var package = new ExcelPackage())
            {
                // add a new worksheet to the empty workbook
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Export List - " + DateTime.Now.ToString("yyyyMMdd"));

                // --------- Data and Styling --------------//
                // Add some formatting to the worksheet
                //worksheet.TabColor = Color.Blue;
                worksheet.DefaultRowHeight = 12;
                //worksheet.HeaderFooter.FirstFooter.LeftAlignedText = string.Format("Generated: {0}", DateTime.Now.ToShortDateString());
                worksheet.Row(1).Height = 20;
                worksheet.Row(2).Height = 18;

                //CultureInfo culture = new CultureInfo("en-US");
                //string strDateFormat = "yyyy-MM-dd";
                int rowIndex = 1;
                int totalColumn = arrColumnIds.Count;
                int columIndex = 1;

                //Additional Information : Searching Criteria
                if (filterCriterias != null)
                {
                    foreach (string filterCriteria in filterCriterias)
                    {
                        worksheet.Cells[rowIndex, columIndex].Value = filterCriteria.Trim();
                        rowIndex++;
                    }
                }

                // Start adding the header First of all the first row
                foreach (string strColumnName in arrColumnNames)
                {
                    //Write Column Header
                    worksheet.Cells[rowIndex, columIndex].Value = strColumnName.Trim();

                    if (arrDate.Contains(arrColumnIds[columIndex-1]))
                    {
                        worksheet.Column(columIndex).Style.Numberformat.Format = "@";
                    }

                    columIndex++;
                }

                columIndex = 1;

                //Format Header
                using (var range = worksheet.Cells[rowIndex, columIndex, rowIndex, totalColumn])
                {
                    range.Style.Font.Bold = true;
                    range.Style.ShrinkToFit = false;
                }

                rowIndex++;

                // Start Writing Data                
                foreach (T data in dataList)
                {
                    columIndex = 1;

                    foreach (string strColumnId in arrColumnIds)
                    {
                        var p = properties.Find(strColumnId, true);
                        if (p == null) throw new Exception("Please make sure " + strColumnId + " is in dataList!");
                        var value = p.GetValue(data);
                        if (value == null)
                        {
                            columIndex++;
                            continue;
                        }

                        var valueType = Nullable.GetUnderlyingType(p.PropertyType) ?? p.PropertyType;

                        if (columnMappings != null && columnMappings.ContainsKey(strColumnId))
                        {
                            var expr = columnMappings[strColumnId];
                            worksheet.Cells[rowIndex, columIndex].Value = expr.Invoke(value);
                        }
                        else if (valueType.Equals(typeof(bool)))
                            worksheet.Cells[rowIndex, columIndex].Value = (bool)value ? "Y" : "N";
                        else if (valueType.Equals(typeof(DateTime)))
                        {
                            var dateTime = (DateTime)value;

                            if (dateTime.Hour == 0 && dateTime.Minute == 0 && dateTime.Second == 0 && dateTime.Millisecond == 0) 
                                worksheet.Cells[rowIndex, columIndex].Value = CommonHelper.ConvertDateTimeToString(dateTime, "dd/MM/yyyy");
                            else
                                worksheet.Cells[rowIndex, columIndex].Value = CommonHelper.ConvertDateTimeToString(dateTime, "dd/MM/yyyy HH:mm:ss");
                        }
                        else
                            worksheet.Cells[rowIndex, columIndex].Value = value != null ? value.ToString().Trim() : "";

                        columIndex++;
                    }

                    rowIndex++;
                }

                //Format the data row
                using (var range = worksheet.Cells[1, 1, rowIndex - 1, totalColumn])
                {
                    range.Style.Font.Bold = false;
                    range.Style.ShrinkToFit = false;
                }

                // Fit the columns according to its content
                for (int i = 1; i <= totalColumn; i++)
                {
                    worksheet.Column(i).AutoFit();
                }

                // save when finished
                package.SaveAs(resultStream);

                //-------- Now leaving the using statement
            } // Outside the using statement
            return resultStream;
        }

        public void getColIdsFromT(Type inputType, Dictionary<string, Func<object, object>> expression, ref List<string> colIds)
        {
            string strExclude = "Id,IsDeleted,CreatedById,CreatedByPost,CreatedOn,UpdatedById,UpdatedByPost,UpdatedOn,RowVersion";
            List<string> excludeList = strExclude.Split(new string[] { "," }, StringSplitOptions.None).ToList();

            PropertyDescriptorCollection properties =
               TypeDescriptor.GetProperties(inputType);
            DataTable table = new DataTable();
            foreach (PropertyDescriptor prop in properties)
            {
                Type type = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
                if (!(/*type.Name.Contains("IList") ||*/ excludeList.Contains(prop.Name)))
                {
                    if (type.IsFundamental() || (expression != null && expression.ContainsKey(prop.Name)))
                    {
                        colIds.Add(prop.Name);
                    }
                }
            }
        }

        public void getColNameFromJson(PropertyDescriptorCollection properties, ColumnModel columnModel, bool showHiddenCol, ref List<string> colIds, ref List<string> colNames)
        {
            for (var i = 0; i < columnModel.models.Count; i++)
            {
                if (columnModel.models[i].hidedlg != true && (columnModel.models[i].hidden == false || showHiddenCol || (columnModel.models[i].hidden == true && columnModel.models[i].exporthidden == true)))
                {
                    if (properties.Find(columnModel.models[i].name, true) != null)
                        colIds.Add(columnModel.models[i].name);
                    else if (!String.IsNullOrEmpty(columnModel.models[i].index) && properties.Find(columnModel.models[i].index, true) != null)
                        colIds.Add(columnModel.models[i].index);

                    colNames.Add(columnModel.names[i]);
                }
            }
        }

        #endregion Export To Excel

        #region Export table to Excel()

        public System.IO.MemoryStream ExportTableToExcel(string strName, string strTable, Dictionary<string, string> columnName, string strWhere = null)
        {
            string strSql = "SELECT * FROM {0} ".FormatWith(strTable);
            string strDataType = "SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'".FormatWith(strTable);

            if (strWhere.IsNotNullOrEmpty())
                strSql += strWhere;

            Dictionary<string, string> fieldType = new Dictionary<string, string>();

            MemoryStream resultStream = new MemoryStream();

            // Create the package and make sure you wrap it in a using statement
            using (var package = new ExcelPackage())
            {
                // add a new worksheet to the empty workbook
                ExcelWorksheet ws = package.Workbook.Worksheets.Add(strName);

                // --------- Data and Styling --------------//
                ws.DefaultRowHeight = 12;
                ws.Row(1).Height = 20;

                List<int> dateColumns = new List<int>();
                List<string> arrColumns = null;
                IList<object[]> fieldList = _reportRepository.GetObjListFromSql(strDataType, ref arrColumns);
                foreach (object[] field in fieldList)
                {
                    fieldType.Add(field[0].ToString(), field[1].ToString());
                }

                IList<object[]> resultList = _reportRepository.GetObjListFromSql(strSql, ref arrColumns);

                int rowIndex = 1;

                //Write Column Header
                ws.Cells[1, 1, resultList.Count + 1, fieldList.Count].Style.Font.Name = "Times New Roman";

                ws.Row(1).Style.Font.Bold = true;
                ws.Row(1).Style.ShrinkToFit = false;

                for (int i = 0; i < fieldList.Count(); i++)
                {
                    string colName = Convert.ToString(fieldList[i][0]);
                    if (columnName.ContainsKey(colName))
                        ws.Cells[rowIndex, i + 1].Value = columnName[colName];
                    else
                        ws.Cells[rowIndex, i + 1].Value = colName;

                    if (fieldType.ContainsKey(colName))
                    {
                        if (resultList.Count > 0)
                        {
                            if (fieldType[colName] == "nvarchar" || fieldType[colName] == "varchar")
                                ws.Cells[2, i + 1, resultList.Count + 1, i + 1].Style.Numberformat.Format = "@";
                            else if (fieldType[colName] == "datetime")
                            {
                                dateColumns.Add(i);
                                ws.Cells[2, i + 1, resultList.Count + 1, i + 1].Style.Numberformat.Format = "dd/mm/yyyy";
                            }
                        }
                    }
                }

                rowIndex = 2;
                for (int i = 0; i < resultList.Count(); i++)
                {
                    object[] data = resultList[i];
                    for (int j = 0; j < data.Count(); j++)
                    {
                        if (data[j] != null)
                        {
                            if (dateColumns.Contains(j))
                                ws.Cells[rowIndex, j + 1].Value = ((DateTime)data[j]).ToString("dd/MM/yyyy HH:mm:ss");
                            else
                                ws.Cells[rowIndex, j + 1].Value = data[j].ToString();
                        }
                    }

                    rowIndex++;
                }

                // Fit the columns according to its content
                for (int i = 1; i <= arrColumns.Count; i++)
                {
                    ws.Column(i).AutoFit();
                }

                // save when finished
                package.SaveAs(resultStream);

                //-------- Now leaving the using statement
            } // Outside the using statement
            return resultStream;
        }

        #endregion Export table to Excel()

        #region Export tables to CSV

        public string ExportTablesToZipFile(string folderPath, string zFileName, List<string> tables)
        {
            string sql = "";
            string fileName = "";

            //Create temp folder
            CommonHelper.CreateFolderIfNeeded(folderPath);

            //Start exporting csv
            foreach (string table in tables)
            {
                sql = "SELECT * FROM " + table;

                fileName = Path.Combine(folderPath, table + ".csv");
                //Export to csv
                ExportSqlToCsv(sql, fileName);
            }

            //Zip files in temp folder
            string zipDirectory = Directory.GetParent(folderPath).FullName;
            string zFilePath = Path.Combine(zipDirectory, zFileName);
            ZipFile.CreateFromDirectory(folderPath, zFilePath);

            //Delete Temp File Directory
            Directory.Delete(folderPath, true);

            return zFilePath;
        }

        public void ExportSqlToCsv(string strSql, string strDestFileName)
        {
            StreamWriter sw = null;
            string l_strData = "";
            Encoding encoder = Encoding.UTF8;

            //CultureInfo culture = new CultureInfo("en-US");
            //string strDateFormat = "yyyy-MM-dd";
            try
            {
                sw = new StreamWriter(strDestFileName, false, encoder);

                //Header Section
                List<string> arrColumns = null;
                IList<object[]> resultList = _reportRepository.GetObjListFromSql(strSql, ref arrColumns);

                if (resultList.Count != 0)
                {
                    foreach (string strColumn in arrColumns)
                    {
                        l_strData += strColumn.Trim() + ",";
                    }
                    //Remove last ','
                    l_strData = l_strData.Substring(0, l_strData.Length - 1);

                    sw.WriteLine(l_strData);
                    l_strData = "";

                    //Start Looping Data
                    foreach (var item in resultList)
                    {
                        for (int i = 0; i < arrColumns.Count; i++)
                        {
                            Type type = null;
                            object data = item[i];
                            if (data != null)
                            {
                                type = data.GetType();
                            }

                            if (type == null)
                            {
                                //empty value
                                l_strData += ",";
                            }
                            else if (type.Equals(typeof(string)))
                            {
                                //String
                                l_strData += @"""" + data.ToString().Trim().Replace(@"""", @"""""") + @"""" + ",";
                            }
                            else if (type.Equals(typeof(DateTime)))
                            {
                                l_strData += @"""" + data.ToString().Trim().Replace(@"""", @"""""") + @"""" + ",";
                                //l_strData += @"""" + ((DateTime)(data)).ToString(strDateFormat, culture).Trim() + @"""" + ",";
                            }
                            else if (type.Equals(typeof(byte[])))
                            {
                                l_strData += System.Text.Encoding.UTF8.GetString((byte[])(data)) + ",";
                            }
                            else
                            {
                                l_strData += data.ToString().Trim() + ",";
                            }
                        }

                        //Remove last ','
                        if (l_strData.IsNotNullOrEmpty() && l_strData.Substring(l_strData.Length - 1, 1) == ",")
                        {
                            l_strData = l_strData.Substring(0, l_strData.Length - 1);
                        }

                        sw.WriteLine(l_strData);
                        l_strData = "";
                    }
                }
                sw.Close();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion Export tables to CSV

        #region "Merge Documents"

        public void DocumentsMerge(object fileName, List<string> arrayList)
        {
            using (DocX documentToCreate = DocX.Load(arrayList[0]))
            {
                foreach (var alItem in arrayList.Skip(1))
                {
                    //// Add Page break between too records
                    //documentToCreate.InsertParagraph("[Temp_Paragraph_needed_to_be_removed]").InsertPageBreakAfterSelf();
                    //// Remove the Paragraph (the Page Break would remain)
                    //var tempParagraph = documentToCreate.Paragraphs.Where(x => x.Text.Equals("[Temp_Paragraph_needed_to_be_removed]"));
                    //foreach (var _tempParagraph in tempParagraph)
                    //{
                    //    _tempParagraph.Remove(false);
                    //}
                    //// Add Section for restart the Page number
                    DocX documentToMergeIn = DocX.Load(alItem);
                    documentToCreate.InsertDocument(documentToMergeIn);
                }

                documentToCreate.SaveAs(fileName.ToString());
            }
        }

        #endregion "Merge Documents"
    }
}