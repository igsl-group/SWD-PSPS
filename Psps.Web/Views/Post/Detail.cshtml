@model Psps.Web.ViewModels.Posts.PostActingViewModel
@using Psps.Resources;

@{
    ViewBag.Title = Labels.Post_Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<form id="postForm" class="form-horizontal" role="form">
    <fieldset></fieldset>
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.RowVersion, htmlAttributes: new { @id = "rowVersion" })

    <div class="form-group">
        @Html.LabelFor(m => m.PostId, new { @class = "col-xs-1 control-label" })
        <div class="col-xs-4">
            @Html.TextBoxFor(m => m.PostId, true, htmlAttributes: new { @id = "postId", @maxLength = "20", @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Rank, new { @class = "col-xs-1 control-label" })
        <div class="col-xs-4">
            @Html.DropDownListFor(m => m.Rank, true, new SelectList(Model.Ranks, "Key", "Value", Model.Rank), htmlAttributes: new { @id = "rank", @class = "form-control", @data_provide = "select2" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Owner, new { @class = "col-xs-1 control-label" })
        <div class="col-xs-4">
            @Html.DropDownListFor(model => model.Owner, true, new SelectList(Model.Users, "Key", "Value", Model.Owner), htmlAttributes: new { @id = "owner", @class = "form-control", @data_provide = "select2" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Supervisor, new { @class = "col-xs-1 control-label" })
        <div class="col-xs-4">
            @Html.DropDownListFor(model => model.Supervisor, true, new SelectList(Model.Posts, "Key", "Value", Model.Supervisor), htmlAttributes: new { @id = "supervisor", @class = "form-control", @data_provide = "select2" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Role, new { @class = "col-xs-1 control-label" })
        <div class="col-xs-9">
            @Html.ListBoxFor(model => model.Role, true, new SelectList(Model.Roles, "Key", "Value", Model.Roles.First().Key), htmlAttributes: new { @id = "role", @class = "form-control", @multiple = "multiple", @data_provide = "select2" })
        </div>
    </div>

    <div class="vspace-6"></div>

    <div class="row">
        <div class="col-xs-12">
            <div class="pull-right">
                <button id="btnCreatePost" name="create" type="button" class="btn btn-sm btn-primary hide">
                    <span class="icon-ok"></span>&nbsp;@Labels.Create
                </button>
                <button id="btnUpdatePost" type="button" class="btn btn-sm btn-primary">
                    <span class="icon-ok"></span>&nbsp;@Labels.Update
                </button>
                <button id="btnCancelPost" type="button" class="btn btn-sm btn-default">
                    <span class="icon-remove"></span>&nbsp;@Labels.Cancel
                </button>
            </div>
        </div>
    </div>

    <div class="vspace-6"></div>
</form>

<div id="actingGrid">
    <legend>@Labels.Post_Acting_Title</legend>
    <div class="row">
        <div class="col-xs-12">
            <div class="grid-stretch-container">
                <table id="actingGridTable"></table>
                <div id="actingGridPager"></div>
            </div>
        </div>
    </div>
</div>

<form id="actingForm" class="form-horizontal" role="form">
    <div id="editModal" class="modal fade">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title">@Labels.Acting_Details</h4>
                </div>
                <div class="modal-body">
                    <fieldset>
                        @Html.HiddenFor(m => m.ActingRowVersion, htmlAttributes: new { @id = "actingRowVersion" })
                        @Html.HiddenFor(m => m.ActingId, htmlAttributes: new { @id = "actingId" })
                        @Html.HiddenFor(m => m.PostId, htmlAttributes: new { @id = "actingPostId" })
                        @Html.HiddenFor(m => m.Rank, htmlAttributes: new { @id = "actingRank" })

                        <div class="form-group">

                            @Html.LabelFor(m => m.AssignTo, new { @class = "col-xs-2 control-label" })
                            <div class="col-xs-6">
                                @Html.DropDownListFor(m => m.AssignTo, true, new SelectList(Model.AssignTos, "Key", "Value", Model.AssignTo), htmlAttributes: new { @id = "assignTo", @class = "form-control", @data_provide = "select2" })
                            </div>
                        </div>
                        <div class="form-group">

                            @Html.LabelFor(m => m.EffectiveFrom, new { @class = "col-xs-2 control-label" })
                            <div class="col-xs-2">

                                @Html.TextBoxFor(m => m.EffectiveFrom, true, htmlAttributes: new { @id = "effectiveFrom", @class = "form-control", @data_provide = "datepicker" })
                            </div>
                        </div>

                        <div class="form-group">

                            @Html.LabelFor(m => m.EffectiveTo, new { @class = "col-xs-2 control-label" })
                            <div class="col-xs-2">

                                @Html.TextBoxFor(m => m.EffectiveTo, true, htmlAttributes: new { @id = "effectiveTo", @class = "form-control", @data_provide = "datepicker" })
                            </div>
                        </div>
                    </fieldset>
                </div>

                <div class="modal-footer">
                    <button id="btnCreateActing" name="create" type="button" class="btn btn-sm btn-primary hide">
                        <span class="icon-ok"></span>&nbsp;@Labels.Create
                    </button>
                    <button id="btnUpdateActing" type="button" class="btn btn-sm btn-primary">
                        <span class="icon-ok"></span>&nbsp;@Labels.Update
                    </button>
                    <button id="btnCancel" type="button" class="btn btn-sm btn-default" data-dismiss="modal">
                        <span class="icon-remove"></span>&nbsp;@Labels.Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
</form>

@section scripts {
    <!-- inline scripts related to this page -->
    <script type="text/javascript">
        var withExtraInformation = false;
        var indexUrl = '@Url.RouteUrl("PostIndex")';
        var newPostUrl = '@Url.RouteUrl("CreatePost")';
        var editPostUrl = '@Url.RouteUrl("EditPost", new { postId = -1 })';
        var getActing = '@Url.RouteUrl("Acting", new { postId = -1 })';
        var createActing = '@Url.RouteUrl("CreateActing", new { postId = -1 })';
        var editActing = '@Url.RouteUrl("EditActing", new { actingId = -1 })';
        var deleteActingUrl = '@Url.RouteUrl("DeteteActing", new { actingId = -1 })';

        $(function () {
            var $postForm = $("#postForm");
            var $actingForm = $("#actingForm");

            addRequired('#assignTo');

            var array = @Html.Raw(Json.Encode(@Model.PostsInRoles))
            $("#role").select2("val", array);
            if ($('#postId').val() != "") {
                $('#postId').prop('readonly', true);
                initActingGrid();
                $('#btnCreatePost').addClass('hide');
                $('#btnUpdatePost').removeClass('hide');
            } else {
                $('#actingGrid').addClass('hide');
                $('#fdActing').addClass('hide');
                $('#btnCreatePost').removeClass('hide');
                $('#btnUpdatePost').addClass('hide');
            }

            //Button click action
            $('#btnCreatePost').click(function () {
                var actionUrl = newPostUrl;
                if ($postForm.valid()) {
                    $postForm.ajaxPostForm(actionUrl,
                         function (response) {
                             // $form.resetForm();
                             notifSuccess(response.message);
                         }
                    );

                }
            });

            $('#btnUpdatePost').click(function () {
                var actionUrl = editPostUrl.replace('-1', $('#postId').val());
                if ($postForm.valid()) {
                    $postForm.ajaxPostForm(actionUrl,
                         function (response) {
                             notifSuccess(response.message);
                             //$form.resetForm();
                             $('#rowVersion').val(response.data.rowVersion);
                         }
                    );
                }
            });

            $('#btnCancelPost').click(function () {
                confirm('@Labels.Cancel_Msg', function (result) {
                    if (result) {
                        window.location = indexUrl;
                    }
                });

            });

            //Acting Modal
            $('#btnCreateActing').click(function () {
                var actionUrl = createActing.replace('-1', $('#postId').val());
                $('#actingRank').val('-1');
                
                if ($actingForm.valid()) {
                    $actingForm.ajaxPostForm(actionUrl,
                         function (response) {
                             $('#editModal').modal('hide');
                             $("#actingGridTable").trigger("reloadGrid", [{ current: true }]);
                             notifSuccess(response.message);
                             // $form.resetForm();
                         }
                    );
                }
            });

            $('#btnUpdateActing').click(function () {
                var actionUrl = editActing.replace('-1', $('#actingId').val());
                if ($actingForm.valid()) {
                    $actingForm.ajaxPostForm(actionUrl,
                         function (response) {
                             $('#editModal').modal('hide');
                             $("#actingGridTable").trigger("reloadGrid", [{ current: true }]);
                             notifSuccess(response.message);
                             //$form.resetForm();
                         }
                    );
                }
            });
        });

        function initActingGrid() {
            var $grid = $('#actingGridTable');
            var pager_selector = '#actingGridPager';

            var actionUrl = getActing.replace('-1', $('#postId').val());
            $grid.jqGrid({
                pager: pager_selector,
                sortname: 'user.EngUserName',
                sortorder: 'asc',
                url: actionUrl,
                datatype: 'json',
                colNames: [
                    '@Html.DisplayNameFor(m => m.UserName)',
                    '@Html.DisplayNameFor(m => m.EffectiveFrom)',
                    '@Html.DisplayNameFor(m => m.EffectiveTo)',
                    '@Html.DisplayNameFor(m => m.RowVersion)',
                    'Acting Id',
                    '@Html.DisplayNameFor(m => m.AssignTo)',
                    'Action'
                ],
                colModel: [{
                    name: 'user.EngUserName',
                    jsonmap: 'engUserName',
                    width: '4'
                }, {
                    name: 'effectiveFrom',
                    template: dateTemplate,
                    width: '4'
                }, {
                    name: 'effectiveTo',
                    template: dateTemplate,
                    width: '4'
                }, {
                    name: 'rowVersion',
                    hidden: true
                }, {
                    name: 'actingId',
                    hidden: true
                }, {
                    name: 'assignToUserId',
                    hidden: true
                }, {
                    name: 'rowAction',
                    index: '',
                    width: 70,
                    fixed: true,
                    sortable: false,
                    search: false,
                    resize: false,
                    formatter: 'actions',
                    formatoptions: {
                        keys: true,
                        delOptions: {
                            recreateForm: true,
                            beforeShowForm: beforeDeleteCallback,
                            onclickSubmit: function (options, rowId) {
                                var data = $grid.jqGrid('getRowData', rowId);
                                options.url = deleteActingUrl.replace('-1', data.actingId)
                                return {
                                    "rowVersion": data.rowVersion
                                };
                            },
                            afterSubmit: function (response, postData) {
                                notifSuccess(response.responseJSON.message);
                                return [true, '', "response.responseText"];
                            }
                        },
                        editbutton: false
                    }
                }],
                loadComplete: defaultGridLoadComplete,
                ondblClickRow: function (rowId, iRow, iCol, e) {
                    var data = $grid.jqGrid('getRowData', rowId);
                    doEditRecord(data);
                }
            });

            //navButtons
                $grid.jqGrid('navGrid', pager_selector, {
                    //navbar options
                    search: true,
                    refresh: true
                }, {}, {}, {}, {
                    //search form
                    recreateForm: true,
                    afterShowSearch: defaultSearchFormAfterShowSearch,
                    afterRedraw: defaultSearchFormAfterRedraw
                }, {}).jqGrid('navButtonAdd', pager_selector, {
                    caption: '',
                    buttonicon: 'icon-plus',
                    onClickButton: doNewRecord,
                    position: 'first',
                    title: '@Labels.NewRecord',
                    cursor: 'pointer'
                });

                function displayInput() {
                    $('#editModal').modal({
                        backdrop: 'static',
                        show: true,
                        keyboard: false
                    });
                };

                function doEditRecord(data) {
                    var actionUrl = getActing.replace("-1", data.postId);
                    ajaxGet(actionUrl,
                        function (response) {
                            $('#actingId').val(data.actingId);
                            $('#actingRowVersion').val(data.rowVersion);
                            $("#assignTo").select2("val", data.assignToUserId);
                            $('#effectiveFrom').val(data.effectiveFrom);
                            $('#effectiveTo').val(data.effectiveTo);

                            $('#btnCreateActing').addClass('hide');
                            $('#btnUpdateActing').removeClass('hide');

                            $('.alert.alert-block.alert-warning.validation-summary-errors').remove();
                            displayInput();
                        }
                    );
                };

                function doNewRecord() {
                    clearForm('#editModal');
                    $('#actingId').val('');
                    $('#actingPostId').val($('#postId').val());
                    $('#actingRowVersion').val('');
                    $('#assignTo').select2('val', '');
                    $('#effectiveFrom').val('');
                    $('#effectiveTo').val('');
                    $('#btnCreateActing').removeClass('hide');
                    $('#btnUpdateActing').addClass('hide');

                    displayInput();
                };
            };
    </script>
}