@model Psps.Web.ViewModels.Account.ProfileViewModel
@using Psps.Resources;

@{
    ViewBag.Title = Labels.My_Profile;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<form id="listProlideUserForm" name="listProlideUserForm" class="form-horizontal" role="form">
    <fieldset>
        <div class="form-group">
            @Html.LabelFor(m => m.UserId, new { @class = "col-xs-2 control-label" })
            <div class="col-xs-4">
                @Html.TextBoxFor(m => m.UserId, true, htmlAttributes: new { @id = "UserId", @class = "form-control", @maxlength = 20, disabled = "disabled" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.PostId, new { @class = "col-xs-2 control-label" })
            <div class="col-xs-4">
                @Html.TextBoxFor(m => m.PostId, true, htmlAttributes: new { @id = "PostId", @class = "form-control", @maxlength = 20, disabled = "disabled" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.EngUserName, new { @class = "col-xs-2 control-label" })
            <div class="col-xs-8">
                @Html.TextBoxFor(m => m.EngUserName, true, htmlAttributes: new { @id = "EngUserName", @class = "form-control", @maxlength = 50 })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.ChiUserName, new { @class = "col-xs-2 control-label" })
            <div class="col-xs-8">
                @Html.TextBoxFor(m => m.ChiUserName, true, htmlAttributes: new { @id = "ChiUserName", @class = "form-control", @maxlength = 50 })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.TelephoneNumber, new { @class = "col-xs-2 control-label" })
            <div class="col-xs-4">
                @Html.TextBoxFor(m => m.TelephoneNumber, true, htmlAttributes: new { @id = "TelephoneNumber", @class = "form-control", @maxlength = 15 })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Email, new { @class = "col-xs-2 control-label" })
            <div class="col-xs-8">
                @Html.TextBoxFor(m => m.Email, true, htmlAttributes: new { @id = "Email", @class = "form-control", @maxlength = 50 })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Role, new { @class = "col-xs-2 control-label" })
            <div class="col-xs-8">
                @Html.ListBoxFor(model => model.Roles, true, new SelectList(Model.Roles, "Key", "Value", Model.Roles), htmlAttributes: new { @id = "role", @class = "form-control", @multiple = "multiple", @data_provide = "select2", disabled = "disabled" })
            </div>
        </div>
    </fieldset>
    <div class="row">
        <div class="col-xs-12">
            <div class="pull-right">
                <button id="btnUpdateUser" type="button" class="btn btn-sm btn-primary">
                    <span class="icon-ok"></span>&nbsp;@Labels.Update</button>
                <button id="btnGotoHome" type="button" class="btn btn-sm btn-default" data-dismiss="modal">
                    <span class="icon-remove"></span>&nbsp;@Labels.Cancel</button>
            </div>
        </div>
    </div>
</form>
<div class="vspace-6"></div>
<div id="editModal" class="modal fade">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">@Labels.Acting_Details</h4>
            </div>
            <form id="listProlideForm" name="listProlideForm" role="form" class="form-horizontal">

                <div class="modal-body">
                    @Html.BootstrapValidationSummary()
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.RowVersion, htmlAttributes: new { @id = "rowVersion" })

                    <fieldset>
                        <input id="actingId" name="actingId" type="hidden" />
                        <div class="form-group">

                            @Html.LabelFor(m => m.AssignTo, new { @class = "col-xs-2 control-label" })
                            <div class="col-xs-6">
                                @Html.DropDownListFor(m => m.AssignTo, true, new SelectList(Model.AssignTos, "Key", "Value", Model.AssignTo), htmlAttributes: new { @id = "assignTos", @class = "form-control", @data_provide = "select2" })
                            </div>
                        </div>

                        <div class="form-group">

                            @Html.LabelFor(m => m.EffectiveFrom, new { @class = "col-xs-2 control-label" })
                            <div class="col-xs-2">

                                @Html.TextBoxFor(m => m.EffectiveFrom, true, htmlAttributes: new { @id = "effectivefrom", @class = "form-control", @data_provide = "datepicker" })
                            </div>
                        </div>

                        <div class="form-group">

                            @Html.LabelFor(m => m.EffectiveTo, new { @class = "col-xs-2 control-label" })
                            <div class="col-xs-2">

                                @Html.TextBoxFor(m => m.EffectiveTo, true, htmlAttributes: new { @id = "effectiveto", @class = "form-control", @data_provide = "datepicker" })
                            </div>
                        </div>
                    </fieldset>
                </div>
            </form>
            <div class="modal-footer">
                <button id="btnCreateActing" name="create" type="button" class="btn btn-sm btn-primary hide">
                    <span class="icon-ok"></span>&nbsp;@Labels.Create
                </button>
                <button id="btnUpdateActing" type="button" class="btn btn-sm btn-primary">
                    <span class="icon-ok"></span>&nbsp;@Labels.Update
                </button>
                <button id="btnCancel" type="button" class="btn btn-sm btn-default" data-dismiss="modal">
                    <span class="icon-remove"></span>&nbsp;@Labels.Cancel
                </button>
            </div>
        </div>
    </div>
</div>
<fieldset>
    <legend>@Labels.Post_Acting_Title</legend>
</fieldset>
<div class="row">
    <div class="col-xs-12">
        <div class="grid-stretch-container">
            <table id="actingGridTable"></table>
            <div id="actingGridPager"></div>
        </div>
    </div>
</div>
@section scripts {
    <!-- inline scripts related to this page -->
    <script type="text/javascript">
        var editUserUrl = '@Url.RouteUrl("ProfileEditUser", new { userId = "placeholder" })';
        var homeUrl = '@Url.RouteUrl("Home")';

        var createActingUrl = '@Url.RouteUrl("ProfileCreateActing")';
        var updateActingUrl = '@Url.RouteUrl("ProfileUpdateActing", new { actingId = -1 })';
        var listActingUrl = '@Url.RouteUrl("ProfileListActing")';
        var deleteActingUrl = '@Url.RouteUrl("ProfileDeteteActing", new { actingId = -1 })';

        $(function () {
            //var selectedRole = ["Admin", "admin2"];
            var array = @Html.Raw(Json.Encode(@Model.Role))

            //alert(array);
            $("#role").select2("val", array);

            $('#btnUpdateUser').click(function () {
                var $form = $("#listProlideUserForm");
                if ($form.valid()) {
                    var actionUrl = editUserUrl.replace('placeholder', $("#UserId").val());
                    //alert($('#roleForm').serialize());
                    $form.ajaxPostForm(actionUrl,
                         function (response) {
                             notifSuccess(response.message);
                         }
                    );
                }

            });

            $('#btnGotoHome').click(function () {
                location.href = homeUrl;
            });

            //Acting
            initActingGrid();

            $('#btnCreateActing').click(function () {

                var $form = $("#listProlideForm");
                if ($form.valid()) {
                    var actionUrl = createActingUrl;
                    //alert($('#roleForm').serialize());
                    $form.ajaxPostForm(actionUrl,
                         function (response) {
                             $('#editModal').modal('hide');
                             $("#actingGridTable").trigger("reloadGrid", [{ current: true }]);
                             notifSuccess(response.message);
                         }
                    );
                }

            });

            $('#btnUpdateActing').click(function () {
                var $form = $("#listProlideForm");
                if ($form.valid()) {
                    var actionUrl = updateActingUrl.replace('-1', $("#actingId").val());
                    //alert($('#roleForm').serialize());
                    $form.ajaxPostForm(actionUrl,
                         function (response) {
                             $('#editModal').modal('hide');
                             $("#actingGridTable").trigger("reloadGrid", [{ current: true }]);
                             notifSuccess(response.message);
                         }
                    );
                }

            });
        });

        function initActingGrid() {
            var $grid = $('#actingGridTable');
            var pager_selector = '#actingGridPager';
            //var actionUrl = getActing.replace('-1', $('#postId').val());
            $grid.jqGrid({
                pager: pager_selector,
                sortname: 'user.EngUserName',
                sortorder: 'asc',
                url: listActingUrl,
                datatype: 'json',
                colNames: [
                    '@Html.DisplayNameFor(m => m.EngUserName)',
                    '@Html.DisplayNameFor(m => m.EffectiveFrom)',
                    '@Html.DisplayNameFor(m => m.EffectiveTo)',
                    '@Html.DisplayNameFor(m => m.RowVersion)',
                    '@Html.DisplayNameFor(m => m.ActingId)',
                    '@Html.DisplayNameFor(m => m.AssignToUserId)',
                    '@Html.DisplayNameFor(m => m.Action)'
                ],
                colModel: [{
                    name: 'user.EngUserName',
                    jsonmap: 'engUserName',
                    width: '4'
                }, {
                    name: 'effectiveFrom',
                    template: dateTemplate,
                    width: '4'
                }, {
                    name: 'effectiveTo',
                    template: dateTemplate,
                    width: '4'
                }, {
                    name: 'rowVersion',
                    hidden: true
                }, {
                    name: 'actingId',
                    hidden: true
                }, {
                    name: 'assignToUserId',
                    hidden: true
                }, {
                    name: 'rowAction',
                    index: '',
                    width: 70,
                    fixed: true,
                    sortable: false,
                    search: false,
                    resize: false,
                    formatter: 'actions',
                    formatoptions: {
                        keys: true,
                        delOptions: {
                            recreateForm: true,
                            beforeShowForm: beforeDeleteCallback,
                            onclickSubmit: function (options, rowId) {
                                var data = $grid.jqGrid('getRowData', rowId);
                                options.url = deleteActingUrl.replace('-1', data.actingId);
                                return {
                                    "rowVersion": data.rowVersion
                                };

                            },
                            afterSubmit: function (response, postData) {
                                notifSuccess(response.responseJSON.message);
                                return [true, '', "response.responseText"];
                            }
                        },
                        editbutton: false
                    }
                }],
                loadComplete: defaultGridLoadComplete,
                ondblClickRow: function (rowId, iRow, iCol, e) {
                    var data = $grid.jqGrid('getRowData', rowId);
                    //alert(data.actingId);
                    doEditRecord(data);
                }
            });

            //navButtons
            $grid.jqGrid('navGrid', pager_selector, {
                //navbar options
                search: true,
                refresh: true
            }, {}, {}, {}, {
                //search form
                recreateForm: true,
                afterShowSearch: defaultSearchFormAfterShowSearch,
                afterRedraw: defaultSearchFormAfterRedraw
            }, {}).jqGrid('navButtonAdd', pager_selector, {
                caption: '',
                buttonicon: 'icon-plus',
                onClickButton: doNewRecord,
                position: 'first',
                title: '@Labels.NewRecord',
                cursor: 'pointer'
            });

            function doShowModal() {
                $('.alert.alert-block.alert-warning.validation-summary-errors').remove();

                $('#editModal').modal({
                    backdrop: 'static',
                    show: true
                });
            };
            function displayInput() {
                $('#editModal').modal({
                    backdrop: 'static',
                    show: true
                });
            };

            function doEditRecord(data) {
                $('#actingId').val(data.actingId);

                $('#btnUpdateActing').removeClass('hide');
                $('#btnCreateActing').addClass('hide');
                $('#rowVersion').val(data.rowVersion);

                $("#assignTos").select2("val", data.assignToUserId);
                $('#effectivefrom').val(data.effectiveFrom);
                $('#effectiveto').val(data.effectiveTo);

                doShowModal();

            };

            function doNewRecord() {
                displayInput();
                clearForm('#editModal');
                $('#rowVersion').val('');
                $('#assignto').val('');
                $('#effectivefrom').val('');
                $('#effectiveto').val('');
                $('#btnCreateActing').removeClass('hide');
                $('#btnUpdateActing').addClass('hide');
                doShowModal();
            };
        };
    </script>
}